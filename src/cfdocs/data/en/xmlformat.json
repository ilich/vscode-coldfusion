{
	"name":"XMLFormat",
	"type":"function",
	"syntax":"XMLFormat(String [, escapeChars])",
	"returns":"String",
	"related":["encodeForXML"],
	"description":"Escapes XML special characters in a string, so that the string is safe to use with XML.",
	"discouraged":"Adobe recommends using encodeForXML instead of XMLFormat.",
	"params": [
		{"name":"String","description":"The string to escape","required":true,"default":"","type":"String","values":[]},
		{"name":"escapeChars","description":"When true escapes restricted characters according to the W3C XML standard.","required":false,"default":"","type":"boolean","values":[]}

	],
	"engines": {
		"coldfusion": {"minimum_version":"4.5", "notes":"", "docs":"https://helpx.adobe.com/coldfusion/cfml-reference/coldfusion-functions/functions-t-z/xmlformat.html"},
		"lucee": {"minimum_version":"", "notes":"", "docs":"http://docs.lucee.org/reference/functions/xmlformat.html"},
		"railo": {"minimum_version":"", "notes":"", "docs":"http://railodocs.org/index.cfm/function/xmlformat"},
		"openbd": {"minimum_version":"", "notes":"", "docs":"http://openbd.org/manual/?/function/xmlformat"}
	},
	"links": [

	],
	"examples": [
		{
			"title":"Basic XMLFormat() usage",
			"description":"In this example we demonstrate passing the invalid characters < and & into the XMLFormat() function to make them XML safe.",
			"code":"writeOutput( XMLFormat( '<node>Good &amp; Juicy</node>') );",
			"result":"&lt;node&gt;Good &amp;amp; Juicy&lt;/node&gt;",
			"runnable":true
		}
		
	]

}
