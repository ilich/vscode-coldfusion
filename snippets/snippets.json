{
	"abs": {
		"prefix": "abs",
		"body": "abs(${1:number})$0",
		"description": "abs"
	},
	"aCos": {
		"prefix": "aCos",
		"body": "aCos(${1:number})$0",
		"description": "aCos"
	},
	"addSOAPRequestHeader": {
		"prefix": "addSOAPRequestHeader",
		"body": "addSOAPRequestHeader(${1:webservice}, ${2:namespace}, ${3:name}, ${4:value} ${5:[, mustunderstand]})$0",
		"description": "addSOAPRequestHeader"
	},
	"addSOAPResponseHeader": {
		"prefix": "addSOAPResponseHeader",
		"body": "addSOAPResponseHeader(${1:namespace}, ${2:name}, ${3:value} ${4:[, mustunderstand]})$0",
		"description": "addSOAPResponseHeader"
	},
	"arrayAppend": {
		"prefix": "arrayAppend",
		"body": "arrayAppend(${1:array}, ${2:value})$0",
		"description": "arrayAppend"
	},
	"arrayAvg": {
		"prefix": "arrayAvg",
		"body": "arrayAvg(${1:array})$0",
		"description": "arrayAvg"
	},
	"arrayClear": {
		"prefix": "arrayClear",
		"body": "arrayClear(${1:array})$0",
		"description": "arrayClear"
	},
	"arrayDeleteAt": {
		"prefix": "arrayDeleteAt",
		"body": "arrayDeleteAt(${1:array}, ${2:position})$0",
		"description": "arrayDeleteAt"
	},
	"arrayInsertAt": {
		"prefix": "arrayInsertAt",
		"body": "arrayInsertAt(${1:array}, ${2:position}, ${3:value})$0",
		"description": "arrayInsertAt"
	},
	"arrayIsEmpty": {
		"prefix": "arrayIsEmpty",
		"body": "arrayIsEmpty(${1:array})$0",
		"description": "arrayIsEmpty"
	},
	"arrayLen": {
		"prefix": "arrayLen",
		"body": "arrayLen(${1:array})$0",
		"description": "arrayLen"
	},
	"arrayMax": {
		"prefix": "arrayMax",
		"body": "arrayMax(${1:array})$0",
		"description": "arrayMax"
	},
	"arraymin": {
		"prefix": "arraymin",
		"body": "ArrayMin(${1:array})$0",
		"description": "arraymin"
	},
	"arrayNew": {
		"prefix": "arrayNew",
		"body": "arrayNew(${1:dimension})$0",
		"description": "arrayNew"
	},
	"arrayPrepend": {
		"prefix": "arrayPrepend",
		"body": "arrayPrepend(${1:array}, ${2:value})$0",
		"description": "arrayPrepend"
	},
	"arrayResize": {
		"prefix": "arrayResize",
		"body": "arrayResize(${1:array}, ${2:minimum_size})$0",
		"description": "arrayResize"
	},
	"arraySet": {
		"prefix": "arraySet",
		"body": "arraySet(${1:array}, ${2:start_pos}, ${3:end_pos}, ${4:value})$0",
		"description": "arraySet"
	},
	"arraySort": {
		"prefix": "arraySort",
		"body": "arraySort(${1:array}, ${2:sort_type} ${3:[, sort_order ]})$0",
		"description": "arraySort"
	},
	"arraySum": {
		"prefix": "arraySum",
		"body": "arraySum(${1:array})$0",
		"description": "arraySum"
	},
	"arraySwap": {
		"prefix": "arraySwap",
		"body": "arraySwap(${1:array}, ${2:position1}, ${3:position2})$0",
		"description": "arraySwap"
	},
	"arrayToList": {
		"prefix": "arrayToList",
		"body": "arrayToList(${1:array} ${2:[, delimiter ]})$0",
		"description": "arrayToList"
	},
	"asc": {
		"prefix": "asc",
		"body": "asc(${1:string})$0",
		"description": "asc"
	},
	"aSin": {
		"prefix": "aSin",
		"body": "aSin(${1:number})$0",
		"description": "aSin"
	},
	"atn": {
		"prefix": "atn",
		"body": "atn(${1:number})$0",
		"description": "atn"
	},
	"binaryDecode": {
		"prefix": "binaryDecode",
		"body": "binaryDecode(${1:string}, ${2:binaryencoding})$0",
		"description": "binaryDecode"
	},
	"binaryEncode": {
		"prefix": "binaryEncode",
		"body": "binaryEncode(${1:binarydata}, ${2:encoding})$0",
		"description": "binaryEncode"
	},
	"bitAnd": {
		"prefix": "bitAnd",
		"body": "bitAnd(${1:number1}, ${2:number2})$0",
		"description": "bitAnd"
	},
	"bitMaskClear": {
		"prefix": "bitMaskClear",
		"body": "bitMaskClear(${1:number}, ${2:start}, ${3:length})$0",
		"description": "bitMaskClear"
	},
	"bitMaskRead": {
		"prefix": "bitMaskRead",
		"body": "bitMaskRead(${1:number}, ${2:start}, ${3:length})$0",
		"description": "bitMaskRead"
	},
	"bitMaskSet": {
		"prefix": "bitMaskSet",
		"body": "bitMaskSet(${1:number}, ${2:mask}, ${3:start}, ${4:length})$0",
		"description": "bitMaskSet"
	},
	"bitNot": {
		"prefix": "bitNot",
		"body": "bitNot(${1:number})$0",
		"description": "bitNot"
	},
	"bitOr": {
		"prefix": "bitOr",
		"body": "bitOr(${1:number1}, ${2:number2})$0",
		"description": "bitOr"
	},
	"bitSHLN": {
		"prefix": "bitSHLN",
		"body": "bitSHLN(${1:number}, ${2:count})$0",
		"description": "bitSHLN"
	},
	"bitSHRN": {
		"prefix": "bitSHRN",
		"body": "bitSHRN(${1:number}, ${2:count})$0",
		"description": "bitSHRN"
	},
	"bitXor": {
		"prefix": "bitXor",
		"body": "bitXor(${1:number1}, ${2:number2})$0",
		"description": "bitXor"
	},
	"ceiling": {
		"prefix": "ceiling",
		"body": "ceiling(${1:number1})$0",
		"description": "ceiling"
	},
	"cfabort": {
		"prefix": "cfabort",
		"body": "<cfabort showerror=\"$1\">$0",
		"description": "cfabort"
	},
	"cfapplet": {
		"prefix": "cfapplet",
		"body": "<cfapplet appletSource = \"$1\" name = \"$2\"${3: height = \"${4:[ ]}\" width = \"${5:[ ]}\" vSpace = \"${6:[ ]}\" hSpace = \"${7:[ ]}\" align = \"${8:[ ]}\" notSupported = \"${9:[ ]}\" param_1 = \"${10:[ ]}\" param_2 = \"${11:[ ]}\" param_n = \"${12:[ ]}\"}>$0\t",
		"description": "cfapplet"
	},
	"cfapplication": {
		"prefix": "cfapplication",
		"body": "<cfapplication\r\n\tname = \"$1\"${2: \r\n\tloginStorage = \"$3\"\r\n\tclientManagement = \"$4\"\r\n\tclientStorage = \"$5\" \r\n\tsetClientCookies = \"$6\"\r\n\tsessionManagement = \"$7\"\r\n\tsessionTimeout = #CreateTimeSpan(${8:days}, ${9:hours}, ${10:minutes}, ${11:seconds})#\r\n\tapplicationTimeout =  #CreateTimeSpan(${12:days}, ${13:hours}, ${14:minutes}, ${15:seconds})#\r\n\tsetDomainCookies = \"$16\"}>$0",
		"description": "cfapplication"
	},
	"cfargument": {
		"prefix": "cfargument",
		"body": "<cfargument name=\"$1\"${2: type=\"${3:[ ]}\" required=\"${4:[ ]}\" default=\"${5:[ ]}\" displayname=\"${6:[ ]}\" hint=\"${7:[ ]}\"}>$0",
		"description": "cfargument"
	},
	"cfassociate": {
		"prefix": "cfassociate",
		"body": "<cfassociate${1: baseTag = \"${2:[ ]}\" dataCollection = \"${3:[ ]}\"}>$0",
		"description": "cfassociate"
	},
	"cfbreak": {
		"prefix": "cfbreak",
		"body": "<cfbreak>",
		"description": "cfbreak"
	},
	"cfcache": {
		"prefix": "cfcache",
		"body": "<cfcache action = \"${2:[ ]}\" directory = \"${2:[ ]}\" timespan = \"${2:[ ]}\" expireURL = \"${2:[ ]}\" username = \"${2:[ ]}\" password = \"${2:[ ]}\" port = \"\" protocol = \"${2:[ ]}\">",
		"description": "cfcache"
	},
	"cfcalendar": {
		"prefix": "cfcalendar",
		"body": "<cfcalendar name = \"$1\"${2: height = \"${3:[ ]}\" width = \"${4:[ ]}\" selectedDate = \"${5:[ ]}\" startRange = \"${6:[ ]}\" endRange = \"${7:[ ]}\" disabled = \"${8:[ ]}\" mask = \"${9:[ ]}\" dayNames = \"${10:[ ]}\" monthNames = \"${11:[ ]}\" style=\"${12:[ ]}\" enabled = \"${13:[ ]}\" visible = \"${14:[ ]}\" tooltip = \"${15:[ ]}\" onChange = \"${16:[ ]}\" onBlur = \"${17:[ ]}\" onFocus = \"${18:[ ]}\"}>$0",
		"description": "cfcalendar"
	},
	"cfcase": {
		"prefix": "cfcase",
		"body": "<cfcase value = \"$1\"${2: delimiters = \"${3:[ ]}\"}>$4</cfcase>$0",
		"description": "cfcase"
	},
	"cfcatch": {
		"prefix": "cfcatch",
		"body": [
			"<cfcatch type = \"$1\">",
			"\t$2",
			"</cfcatch>$0"
		],
		"description": "cfcatch"
	},
	"cfchart": {
		"prefix": "cfchart",
		"body": [
			"<cfchart\r\n\tname = \"$1\"${2:\r\n\tbackgroundColor = \"${3:[ ]}\"\r\n\tchartHeight = \"${4:[ ]}\"\r\n\tchartWidth = \"${5:[ ]}\"\r\n\tdataBackgroundColor = \"${6:[ ]}\"\r\n\tfont = \"${7:[ ]}\"\r\n\tfontBold = \"${8:[ ]}\"\r\n\tfontItalic = \"${9:[ ]}\"\r\n\tfontSize = \"${10:[ ]}\"\r\n\tforegroundColor = \"${11:[ ]}\"\r\n\tformat = \"${12:[ ]}\"\r\n\tgridlines = \"${13:[ ]}\"\r\n\tlabelFormat = \"${14:[ ]}\"\r\n\tmarkerSize = \"${15:[ ]}\"\r\n\tpieSliceStyle = \"${16:[ ]}\"\r\n\tscaleFrom = \"${17:[ ]}\"\r\n\tscaleTo = \"${18:[ ]}\"\r\n\tseriesPlacement = \"${19:[ ]}\"\r\n\tshow3D = \"${20:[ ]}\"\r\n\tshowBorder = \"${21:[ ]}\"\r\n\tshowLegend = \"${22:[ ]}\"\r\n\tshowMarkers = \"${23:[ ]}\"\r\n\tshowXGridlines = \"${24:[ ]}\"\r\n\tshowYGridlines = \"${25:[ ]}\"\r\n\tsortXAxis = \"${26:[ ]}\"\r\n\ttipBGColor = \"${27:[ ]}\"\r\n\ttipStyle = \"${28:[ ]}\"\r\n\ttitle = \"${29:[ ]}\"\r\n\turl = \"${30:[ ]}\"\r\n\txAxisTitle = \"${31:[ ]}\"\r\n\txAxisType = \"${32:[ ]}\"\r\n\txOffset = \"${33:[ ]}\"\r\n\tyAxisTitle = \"${34:[ ]}\"\r\n\tyAxisType = \"${35:[ ]}\"\r\n\tyOffset = \"${36:[ ]}\"}>",
			"\t$37",
			"</cfchart>$0"
		],
		"description": "cfchart"
	},
	"cfchartdata": {
		"prefix": "cfchartdata",
		"body": "<cfchartdata item = \"$1\" value = \"$2\">$0",
		"description": "cfchartdata"
	},
	"cfchartseries": {
		"prefix": "cfchartseries",
		"body": [
			"<cfchartseries type=\"$1\"${2: colorlist = \"${3:[ ]}\" itemColumn=\"${4:[ ]}\" markerStyle=\"${5:[ ]}\" paintStyle=\"${6:[ ]}\" query=\"${7:[ ]}\" seriesColor=\"${8:[ ]}\" seriesLabel=\"${9:[ ]}\" valueColumn=\"${10:[ ]}\" dataLabelStyle=\"${11:[ ]}\"}>",
			"\t$12",
			"</cfchartseries>$0"
		],
		"description": "cfchartseries"
	},
	"cfcol": {
		"prefix": "cfcol",
		"body": "<cfcol header = \"$1\" text = \"$2\"${3: width = \"${4:[ ]}\" align = \"${5:[ ]}\"}>$0",
		"description": "cfcol"
	},
	"cfcollection": {
		"prefix": "cfcollection",
		"body": "<cfcollection action = \"$1\"${2: collection = \"${3:[ ]}\" path = \"${4:[ ]}\" language = \"${5:[ ]}\" name = \"${6:[ ]}\" categories = \"${7:[ ]}\" or \"${8:[ ]}\"}>$0",
		"description": "cfcollection"
	},
	"cfcomponent": {
		"prefix": "cfcomponent",
		"body": [
			"<cfcomponent${1: extends =\"${2:[ ]}\" output = \"${3:[ ]}\" style = \"${4:[ ]}\" namespace = \"${5:[ ]}\" serviceportname = \"${6:[ ]}\" porttypename = \"${7:[ ]}\" bindingname = \"${8:[ ]}\" wsdlfile = \"${9:[ ]}\" displayname = \"${10:[ ]}\" hint = \"${11:[ ]}\"}>",
			"\t$12",
			"</cfcomponent>$0"
		],
		"description": "cfcomponent"
	},
	"cfcontent": {
		"prefix": "cfcontent",
		"body": "<cfcontent type = \"${1:[ ]}\" deleteFile = \"${2:[ ]}\" file = \"${3:[ ]}\" variable = \"${4:[ ]}\" reset = \"${5:[ ]}\">$0",
		"description": "cfcontent"
	},
	"cfcookie": {
		"prefix": "cfcookie",
		"body": "<cfcookie name = \"$1\"${2: value = \"${3:[ ]}\" expires = \"${4:[ ]}\" secure = \"${5:[ ]}\" path = \"${6:[ ]}\" domain = \"${7:[ ]}\"}>$0",
		"description": "cfcookie"
	},
	"cfdirectory": {
		"prefix": "cfdirectory",
		"body": "<cfdirectory directory = \"$1\" action = \"${2:[ ]}\" name = \"${3:[ ]}\" filter = \"${4:[ ]}\" mode = \"${5:[ ]}\" sort = \"${6:[ ]}\" newDirectory = \"${7:[ ]}\" recurse = \"${8:[ ]}\">$0",
		"description": "cfdirectory"
	},
	"cfdocument": {
		"prefix": "cfdocument",
		"body": [
			"<cfdocument format = \"$1\"${2: backgroundvisible = \"${3:[ ]}\" encryption = \"${4:[ ]}\" filename = \"${5:[ ]}\" fontembed = \"${6:[ ]}\" marginbottom = \"${7:[ ]}\" marginleft = \"${8:[ ]}\" marginright = \"${9:[ ]}\" margintop = \"${10:[ ]}\" mimetype = \"${11:[ ]}\" name = \"${12:[ ]}\" orientation = \"${13:[ ]}\" overwrite = \"${14:[ ]}\" ownerpassword = \"${15:[ ]}\" pageheight = \"${16:[ ]}\" pagetype = \"${17:[ ]}\" pagewidth = \"${18:[ ]}\" permissions = \"${19:[ ]}\" scale = \"${20:[ ]}\" src = \"${21:[ ]}\" srcfile = \"${22:[ ]}\" unit = \"${23:[ ]}\" userpassword = \"${24:[ ]}\"}>",
			"\t$25",
			"</cfdocument>$0"
		],
		"description": "cfdocument"
	},
	"cfdocumentitem": {
		"prefix": "cfdocumentitem",
		"body": [
			"<cfdocumentitem type = \"$1\">",
			"\t$2",
			"</cfdocumentitem>$0"
		],
		"description": "cfdocumentitem"
	},
	"cfdocumentsection": {
		"prefix": "cfdocumentsection",
		"body": [
			"<cfdocumentsection${1: margintop = \"${2:[ ]}\" marginbottom = \"${3:[ ]}\" marginleft = \"${4:[ ]}\" marginright = \"${5:[ ]}\" mimetype = \"${6:[ ]}\" src = \"${7:[ ]}\" srcfile = \"${8:[ ]}\"}>",
			"\t$9",
			"</cfdocumentsection>$0"
		],
		"description": "cfdocumentsection"
	},
	"cfdump": {
		"prefix": "cfdump",
		"body": "<cfdump${1: var = \"${2:#variable#}\" expand = \"${3:[ ]}\" label = \"${4:[ ]}\" top = \"${5:[ ]}\"}>$0",
		"description": "cfdump"
	},
	"cferror": {
		"prefix": "cferror",
		"body": "<cferror type = \"$1\" template = \"$2\"${3: mailTo = \"${4:[ ]}\" exception = \"${5:[ ]}\"}>$0",
		"description": "cferror"
	},
	"cfexecute": {
		"prefix": "cfexecute",
		"body": [
			"<cfexecute name = \"$1\"${2: arguments = \"${3:[ ]}\" outputFile = \"${4:[ ]}\" variable = \"${5:[ ]}\" timeout = \"${6:[ ]}\"}>",
			"\t$7",
			"</cfexecute>$0"
		],
		"description": "cfexecute"
	},
	"cfexit": {
		"prefix": "cfexit",
		"body": "<cfexit${1: method = \"${2:[ ]}\"}>$0",
		"description": "cfexit"
	},
	"cffile": {
		"prefix": "cffile",
		"body": "<cffile action = \"append\" file = \"$2\"${3: output = \"${4:[ ]}\" addNewLine = \"${5:[ ]}\" attributes = \"${6:[ ]}\" mode = \"${7:[ ]}\" charset = \"${8:[ ]}\" fixnewline = \"${9:[ ]}\"}>$0",
		"description": "cffile append"
	},
	"cffile1": {
		"prefix": "cffile",
		"body": "<cffile action = \"copy\" source = \"$1\" destination = \"$2\"${3:  mode = \"${4:[ ]}\" attributes = \"${5:[ ]}\"}>$0",
		"description": "cffile copy"
	},
	"cffile2": {
		"prefix": "cffile",
		"body": "<cffile action = \"delete\" file = \"$1\">$0",
		"description": "cffile delete"
	},
	"cffile3": {
		"prefix": "cffile",
		"body": "<cffile action = \"move\" source = \"$1\" destination = \"$2\"${3:  mode = \"${4:[ ]}\" attributes = \"${5:[ ]}\" charset = \"${6:[ ]}\"}>$0",
		"description": "cffile move"
	},
	"cffile4": {
		"prefix": "cffile",
		"body": "<cffile action = \"read\" file = \"$1\" variable = \"$2\"${3: charset = \"${4:[ ]}\"}>$0",
		"description": "cffile read"
	},
	"cffile5": {
		"prefix": "cffile",
		"body": "<cffile action = \"readbinary\" file = \"$1\" variable = \"$2\">$0",
		"description": "cffile readbinary"
	},
	"cffile6": {
		"prefix": "cffile",
		"body": "<cffile action = \"rename\" source = \"$1\" destination = \"$2\"${3:  mode = \"${4:[ ]}\" attributes = \"${5:[ ]}\"}>$0",
		"description": "cffile rename"
	},
	"cffile7": {
		"prefix": "cffile",
		"body": "<cffile action = \"upload\" fileField = \"$1\" destination = \"$2\"${3: nameConflict = \"${4:[ ]}\" accept = \"${5:[ ]}\" mode = \"${6:[ ]}\" attributes = \"${7:[ ]}\" result = \"${8:[ ]}\"}>$0",
		"description": "cffile upload"
	},
	"cffile8": {
		"prefix": "cffile",
		"body": "<cffile action = \"$1\" file = \"$2\" output = \"$3\"${4: mode = \"${5:[ ]}\" addNewLine = \"${6:[ ]}\" attributes = \"${7:[ ]}\" charset = \"${8:[ ]}\"  fixnewline = \"${9:[ ]}\"}>$0",
		"description": "cffile write"
	},
	"cfflush": {
		"prefix": "cfflush",
		"body": "<cfflush${1: interval = \"${2:[ ]}\"}>$0",
		"description": "cfflush"
	},
	"cfform": {
		"prefix": "cfform",
		"body": [
			"<cfform${1: name = \"${2:[ ]}\" action = \"${3:[ ]}\" method = \"${4:post}\" format = \"${5:html}\" skin = \"${6:[ ]}\" style = \"${7:[ ]}\" preserveData = \"${8:[ ]}\" onSubmit = \"${9:[ ]}\" scriptSrc = \"${10:[ ]}\" codeBase = \"${11:[ ]}\" archive = \"${12:[ ]}\" onLoad = \"${13:[ ]}\" width = \"${14:[ ]}\" height = \"${15:[ ]}\" onError = \"${16:[ ]}\" wMode = \"${17:[ ]}\" accessible = \"${18:[ ]}\" preloader = \"${19:[ ]}\" timeout = \"${20:[ ]}\" class = \"${21:[ ]}\" enctype = \"${22:[ ]}\" id = \"${23:[ ]}\" onReset = \"${24:[ ]}\" target = \"${25:[ ]}\"}>",
			"\t$26",
			"</cfform>$0"
		],
		"description": "cfform"
	},
	"cfformgroup": {
		"prefix": "cfformgroup",
		"body": [
			"<cfformgroup type = \"$1\" label = \"${2:[ ]}\" style = \"${3:[ ]}\" selectedIndex = \"${4:[ ]}\" width = \"${5:[ ]}\" height = \"${6:[ ]}\" enabled = \"${7:[ ]}\" visible = \"${8:[ ]}\" OnChange = \"${9:[ ]}\" toolTip = \"${10:[ ]}\" id = \"${11:[ ]}\">",
			"\t$12",
			"</cfformgroup>$0"
		],
		"description": "cfformgroup"
	},
	"cfformitem": {
		"prefix": "cfformitem",
		"body": [
			"<cfformitem type = \"$1\"${2: style = \"${3:[ ]}\" width = \"${4:[ ]}\" height = \"${5:[ ]}\" visible = \"${6:[ ]}\" enabled = \"${7:[ ]}\" tooltip = \"${8:[ ]}\" bind = \"${9:[ ]}\"}>",
			"\t$10",
			"</cfformitem>$0"
		],
		"description": "cfformitem"
	},
	"cfftp": {
		"prefix": "cfftp",
		"body": "<cfftp action = \"$1\" username = \"$2\" password = \"$3\" server = \"$4\"${5: timeout = \"${6:[ ]}\" port = \"${7:[ ]}\" connection = \"${8:[ ]}\" proxyServer = \"${9:[ ]}\" retryCount = \"${10:[ ]}\" stopOnError = \"${11:[ ]}\" passive = \"yes\"}>$0",
		"description": "cfftp"
	},
	"cffunction": {
		"prefix": "cffunction",
		"body": [
			"<cffunction name = \"$1\"${2: returnType = \"${3:[ ]}\" roles = \"${4:[ ]}\" access = \"${5:[ ]}\" description = \"${6:[ ]}\" = \"${7:[ ]}\" displayName = \"${8:[ ]}\" hint = \"${9:[ ]}\"}>",
			"\t$10",
			"</cffunction>$0"
		],
		"description": "cffunction"
	},
	"cfgrid": {
		"prefix": "cfgrid",
		"body": [
			"<cfgrid name = \"$1\"${2: format = \"${3:[ ]}\" height = \"${4:[ ]}\" width = \"${5:[ ]}\" query = \"${6:[ ]}\" selectMode = \"${7:[ ]}\" insert = \"${8:[ ]}\" delete = \"${9:[ ]}\" font = \"${10:[ ]}\" fontSize = \"${11:[ ]}\" italic = \"${12:[ ]}\" bold = \"${13:[ ]}\" textColor = \"${14:[ ]}\" gridLines = \"${15:[ ]}\" rowHeight = \"${16:[ ]}\" colHeaders = \"${17:[ ]}\" colHeaderFont = \"${18:[ ]}\" colHeaderFontSize = \"${19:[ ]}\" colHeaderItalic = \"${20:[ ]}\" colHeaderBold = \"${21:[ ]}\" colHeaderTextColor = \"${22:[ ]}\" bgColor = \"${23:[ ]}\" maxRows = \"${24:[ ]}\" style= \"${25:[ ]}\" enabled = \"${26:[ ]}\" visible = \"${27:[ ]}\" toolTip = \"${28:[ ]}\" onChange = \"${29:[ ]}\" autoWidth = \"${30:[ ]}\" vSpace = \"${31:[ ]}\" hSpace = \"${32:[ ]}\" align = \"${33:[ ]}\" sort = \"${34:[ ]}\" href = \"${35:[ ]}\" hrefKey = \"${36:[ ]}\" target = \"${37:[ ]}\" appendKey = \"${38:[ ]}\" highlightHref = \"${39:[ ]}\" onValidate = \"${40:[ ]}\" onError = \"${41:[ ]}\" gridDataAlign = \"${42:[ ]}\" rowHeaders = \"${43:[ ]}\" rowHeaderAlign = \"${44:[ ]}\" rowHeaderFont = \"${45:[ ]}\" rowHeaderFontSize = \"${46:[ ]}\" rowHeaderItalic = \"${47:[ ]}\" rowHeaderBold = \"${48:[ ]}\" rowHeaderTextColor = \"${49:[ ]}\" colHeaderAlign = \"${50:[ ]}\" selectColor = \"${51:[ ]}\" notSupported = \"${52:[ ]}\" pictureBar = \"${53:[ ]}\" insertButton = \"${54:[ ]}\" deleteButton = \"${55:[ ]}\" sortAscendingButton = \"${56:[ ]}\" sortDescendingButton = \"${57:[ ]}\" onBlur = \"${58:[ ]}\" onFocus = \"${59:[ ]}\"}>",
			"\t$60",
			"</cfgrid>$0"
		],
		"description": "cfgrid"
	},
	"cfgridcolumn": {
		"prefix": "cfgridcolumn",
		"body": "<cfgridcolumn name = \"$1\"${2: header = \"${3:[ ]}\" width = \"${4:[ ]}\" type = \"${5:[ ]}\" display = \"${6:[ ]}\" select = \"${7:[ ]}\" font = \"${8:[ ]}\" fontSize = \"${9:[ ]}\" italic = \"${10:[ ]}\" bold = \"${11:[ ]}\" textColor = \"${12:[ ]}\" bgColor = \"${13:[ ]}\" dataAlign = \"${14:[ ]}\" mask= \"${15:[ ]}\" href = \"${16:[ ]}\" hrefKey = \"${17:[ ]}\" target = \"${18:[ ]}\" headerFont = \"${19:[ ]}\" headerFontSize = \"${20:[ ]}\" headerItalic = \"${21:[ ]}\" headerBold = \"${22:[ ]}\" headerTextColor = \"${23:[ ]}\" headerAlign = \"${24:[ ]}\" numberFormat = \"${25:[ ]}\" values = \"${26:[ ]}\" valuesDisplay = \"${27:[ ]}\" valuesDelimiter = \"${28:[ ]}\"}>$0",
		"description": "cfgridcolumn"
	},
	"cfgridrow": {
		"prefix": "cfgridrow",
		"body": "<cfgridrow data = \"$1\">$0",
		"description": "cfgridrow"
	},
	"cfgridupdate": {
		"prefix": "cfgridupdate",
		"body": "<cfgridupdate grid = \"$1\" dataSource = \"$2\" tableName = \"$3\"${4: username = \"${5:[ ]}\" password = \"${6:[ ]}\" tableOwner = \"${7:[ ]}\" tableQualifier = \"${8:[ ]}\" keyOnly = \"${9:[ ]}\"}>$0",
		"description": "cfgridupdate"
	},
	"cfheader": {
		"prefix": "cfheader",
		"body": "<cfheader name = \"$1\"${2: value = \"${3:[ ]}\" charset=\"${4:[ ]}\"}>$0",
		"description": "cfheader"
	},
	"cfhtmlhead": {
		"prefix": "cfhtmlhead",
		"body": "<cfhtmlhead text = \"$1\">$0",
		"description": "cfhtmlhead"
	},
	"cfhttp": {
		"prefix": "cfhttp",
		"body": [
			"<cfhttp url = \"$1\"${2: port = \"${3:[ ]}\" method = \"${4:[ ]}\" proxyServer = \"${5:[ ]}\" proxyPort = \"${6:[ ]}\" proxyUser = \"${7:[ ]}\" proxyPassword = \"${8:[ ]}\" username = \"${9:[ ]}\" password = \"${10:[ ]}\" userAgent = \"${11:[ ]}\" charset = \"${12:[ ]}\" resolveURL = \"${13:[ ]}\" throwOnError = \"${14:[ ]}\" redirect = \"${15:[ ]}\" timeout = \"${16:[ ]}\" getAsBinary = \"${17:[ ]}\" multipart = \"${18:[ ]}\" path = \"${19:[ ]}\" file = \"${20:[ ]}\" name = \"${21:[ ]}\" columns = \"${22:[ ]}\" firstrowasheaders = \"${23:[ ]}\" delimiter = \"${24:[ ]}\" textQualifier = \"${25:[ ]}\" result = \"${26:[ ]}\"}>",
			"\t$27",
			"</cfhttp>$0"
		],
		"description": "cfhttp"
	},
	"cfhttpparam": {
		"prefix": "cfhttpparam",
		"body": "<cfhttpparam type = \"$1\"${2: name = \"${3:[ ]}\" value = \"${4:[ ]}\" file = \"${5:[ ]}\" encoded = \"${6:[ ]}\" mimeType = \"${7:[ ]}\"}>$0",
		"description": "cfhttpparam"
	},
	"cfif": {
		"prefix": "cfif",
		"body": [
			"<cfif $1>",
			"\t$2",
			"<cfelse>",
			"\t$3",
			"</cfif>$0"
		],
		"description": "cfif else"
	},
	"cfif1": {
		"prefix": "cfif",
		"body": [
			"<cfif $1>",
			"\t$2",
			"<cfelseif $3>",
			"\t$4",
			"<cfelse>",
			"\t$5",
			"</cfif>$0"
		],
		"description": "cfif elseif else"
	},
	"cfif2": {
		"prefix": "cfif",
		"body": "<cfif $1>$2</cfif>$0",
		"description": "cfif"
	},
	"cfimport": {
		"prefix": "cfimport",
		"body": "<cfimport taglib = \"$1\" prefix = \"$2\">$0",
		"description": "cfimport"
	},
	"cfinclude": {
		"prefix": "cfinclude",
		"body": "<cfinclude template = \"$1\">$0",
		"description": "cfinclude"
	},
	"cfindex": {
		"prefix": "cfindex",
		"body": "<cfindex collection = \"$1\" action = \"$2\"${3: type = \"${4:[ ]}\" title = \"${5:[ ]}\" key = \"${6:[ ]}\" body = \"${7:[ ]}\" custom1 = \"${8:[ ]}\" custom2 = \"${9:[ ]}\" custom3 = \"${10:[ ]}\" custom4 = \"${11:[ ]}\" category = \"${12:[ ]}\" categoryTree = \"${13:[ ]}\" URLpath = \"${14:[ ]}\" extensions = \"${15:[ ]}\" query = \"${16:[ ]}\" recurse = \"${17:[ ]}\" language = \"${18:[ ]}\" status = \"${19:[ ]}\" prefix = \"${20:[ ]}\"}>$0",
		"description": "cfindex"
	},
	"cfinput": {
		"prefix": "cfinput",
		"body": "<cfinput name = \"$1\"${2: type = \"${3:[ ]}\" label = \"${4:[ ]}\" style = \"${5:[ ]}\" required = \"${6:[ ]}\" mask = \"${7:[ ]}\" validate = \"${8:[ ]}\" validateAt= \"${9:[ ]}\" message = \"${10:[ ]}\" range = \"${11:[ ]}\" maxlength = \"${12:[ ]}\" pattern = \"${13:[ ]}\" onValidate = \"${14:[ ]}\" onError = \"${15:[ ]}\" size = \"${16:[ ]}\" value = \"${17:[ ]}\" bind = \"${18:[ ]}\" checked = \"${19:[ ]}\" disabled = \"${20:[ ]}\" src = \"${21:[ ]}\" onKeyUp = \"${22:[ ]}\" onKeyDown = \"${23:[ ]}\" onMouseUp = \"${24:[ ]}\" onMouseDown = \"${25:[ ]}\" onChange = \"${26:[ ]}\" onClick = \"${27:[ ]}\" firstDayOfWeek = \"${28:[ ]}\" dayNames = \"${29:[ ]}\" monthNames = \"${30:[ ]}\" enabled = \"${31:[ ]}\" visible = \"${32:[ ]}\" toolTip = \"${33:[ ]}\" height = \"${34:[ ]}\" width = \"${35:[ ]}\"}>$0",
		"description": "cfinput"
	},
	"cfinsert": {
		"prefix": "cfinsert",
		"body": "<cfinsert dataSource = \"$1\" tableName = \"$2\"${3: tableOwner = \"${4:[ ]}\" tableQualifier = \"${5:[ ]}\" username = \"${6:[ ]}\" password = \"${7:[ ]}\" formFields = \"${8:[ ]}\"}>$0",
		"description": "cfinsert"
	},
	"cfinvoke": {
		"prefix": "cfinvoke",
		"body": "<cfinvoke component = \"$1\" method = \"$2\"${3: returnVariable = \"${4:[ ]}\" argumentCollection = \"${5:[ ]}\"}>$0",
		"description": "cfinvoke"
	},
	"cfinvokeargument": {
		"prefix": "cfinvokeargument",
		"body": "<cfinvokeargument name=\"$1\" value=\"$2\"${3: omit = \"${4:[ ]}\"}>$0",
		"description": "cfinvokeargument"
	},
	"cfldap": {
		"prefix": "cfldap",
		"body": "<cfldap \n\tserver = \"$1\"${2: \n\tport = \"${3:[ ]}\"\n\tusername = \"${4:[ ]}\"\n\tpassword = \"${5:[ ]}\"\n\taction = \"${6:[ ]}\"\n\tname = \"${7:[ ]}\"\n\ttimeout = \"${8:[ ]}\"\n\tmaxRows = \"${9:[ ]}\"\n\tstart = \"${10:[ ]}\"\n\tscope = \"${11:[ ]}\"\n\tattributes = \"${12:[ ]}\"\n\treturnAsBinary = \"${13:[ ]}\"\n\tfilter = \"${14:[ ]}\"\n\tsort = \"${15:[ ]}\"\n\tsortControl = \"${16:[ ]}\"\n\tdn = \"${17:[ ]}\"\n\tstartRow = \"${18:[ ]}\"\n\tmodifyType = \"${19:[ ]}\"\n\trebind = \"${20:[ ]}\"\n\treferral = \"${21:[ ]}\"\n\tsecure = \"${22:[ ]}\"\n\tseparator = \"${23:[ ]}\"\n\tdelimiter = \"${24:[ ]}\"}>$0",
		"description": "cfldap"
	},
	"cflocation": {
		"prefix": "cflocation",
		"body": "<cflocation url = \"$1\" addToken = \"${2:false}\">$0",
		"description": "cflocation"
	},
	"cflock": {
		"prefix": "cflock",
		"body": [
			"<cflock${1: timeout = \"${2:30}\" scope = \"${3:session}\" name = \"${4:[ ]}\"  throwOnTimeout = \"${5:no}\" type = \"${6:exclusive}\"}>",
			"\t$7",
			"</cflock>$0"
		],
		"description": "cflock"
	},
	"cflog": {
		"prefix": "cflog",
		"body": "<cflog text = \"$1\"${2: log = \"${3:[ ]}\" file = \"${4:[ ]}\" type = \"${5:[ ]}\" application = \"${6:[ ]}\"}>$0",
		"description": "cflog"
	},
	"cflogin": {
		"prefix": "cflogin",
		"body": [
			"<cflogin${1: idletimeout = \"${2:1800}\" applicationToken = \"${3:[ ]}\" cookieDomain = \"${4:[ ]}\"}>",
			"\t<cfloginuser name = \"$5\" password = \"$6\" roles = \"${7:[ ]}\">$8",
			"</cflogin>$0"
		],
		"description": "cflogin"
	},
	"cfloop": {
		"prefix": "cfloop",
		"body": [
			"<cfloop collection = \"$1\" item = \"$2\">",
			"\t$3",
			"</cfloop>$0"
		],
		"description": "cfloop (COM collection or structure)"
	},
	"cfloop1": {
		"prefix": "cfloop",
		"body": [
			"<cfloop condition = \"$1\">",
			"\t$2",
			"</cfloop>$0"
		],
		"description": "cfloop (conditional loop)"
	},
	"cfloop2": {
		"prefix": "cfloop",
		"body": [
			"<cfloop from = \"${1:#createdate($2)#}\" to = \"${3:#createdate($4)#}\" index = \"${5:i}\"${6: step = \"${7:[ ]}\"}>",
			"\t$8",
			"</cfloop>$0"
		],
		"description": "cfloop (date or time loop)"
	},
	"cfloop3": {
		"prefix": "cfloop",
		"body": [
			"<cfloop index = \"${1:i}\" from = \"$2\" to = \"$3\"${4: step = \"${5:[ ]}\"}>",
			"\t$6",
			"</cfloop>$0"
		],
		"description": "cfloop (index loop)"
	},
	"cfloop4": {
		"prefix": "cfloop",
		"body": [
			"<cfloop index = \"${1:i}\" list = \"$2\"${3: delimiters = \"${4:[ ]}\"}>",
			"\t$5",
			"</cfloop>$0"
		],
		"description": "cfloop (list or file loop)"
	},
	"cfloop5": {
		"prefix": "cfloop",
		"body": [
			"<cfloop query = \"$1\"${2: startRow = \"${3:[ ]}\" endRow = \"${4:[ ]}\"}>",
			"\t$5",
			"</cfloop>$0"
		],
		"description": "cfloop (query loop)"
	},
	"cfmail": {
		"prefix": "cfmail",
		"body": [
			"<cfmail \r\n\tto = \"$1\"\r\n\tfrom = \"$2\"\r\n\tsubject = \"$3\"${4:\r\n\tcc = \"${5:[ ]}\"\r\n\tbcc = \"${6:[ ]}\"\r\n\treplyto = \"${7:[ ]}\"\r\n\tfailto = \"${8:[ ]}\"\r\n\tusername = \"${9:[ ]}\"\r\n\tpassword = \"${10:[ ]}\"\r\n\twraptext = \"${11:[ ]}\"\r\n\tcharset = \"${12:[ ]}\"\r\n\ttype = \"${13:[ ]}\"\r\n\tmimeattach = \"${14:[ ]}\"\r\n\tquery = \"${15:[ ]}\"\r\n\tgroup = \"${16:[ ]}\"\r\n\tgroupcasesensitive = \"${17:[ ]}\"\r\n\tstartrow = \"${18:[ ]}\"\r\n\tmaxrows = \"${19:[ ]}\"\r\n\tserver = \"${20:[ ]}\"\r\n\tport = \"${21:[ ]}\"\r\n\tmailerid = \"${22:[ ]}\"\r\n\ttimeout = \"${23:[ ]}\"\r\n\tspoolenable = \"${24:[ ]}\"\r\n\tdebug = \"${25:[ ]}\"}>",
			"\t$26",
			"</cfmail>$0"
		],
		"description": "cfmail (all attributes)"
	},
	"cfmail1": {
		"prefix": "cfmail",
		"body": [
			"<cfmail to=\"$1\" from=\"$2\" subject=\"$3\" server=\"$4\" type=\"${5:html}\">",
			"\t$6",
			"</cfmail>$0"
		],
		"description": "cfmail"
	},
	"cfmailparam": {
		"prefix": "cfmailparam",
		"body": "<cfmailparam file = \"${1:[ ]}\" type =\"${2:[ ]}\" contentID = \"${3:[ ]}\" disposition = \"${4:[ ]}\">$5",
		"description": "cfmailparam"
	},
	"cfmailpart": {
		"prefix": "cfmailpart",
		"body": [
			"<cfmailpart type=\"$1\"${2: charset=\"${3:[ ]}\" wraptext=\"${4:[ ]}\"}>",
			"\t$5",
			"</cfmailpart>$0"
		],
		"description": "cfmailpart"
	},
	"cfmodule": {
		"prefix": "cfmodule",
		"body": "<cfmodule${1: template = \"${2:required unless name attribute is used}\" name = \"${3:required unless template attribute is used}\" attributeCollection = \"${4:[ ]}\" attribute_name1 = \"${5:[ ]}\" attribute_name2 = \"${6:[ ]}\"}>$0",
		"description": "cfmodule"
	},
	"cfntauthenticate": {
		"prefix": "cfntauthenticate",
		"body": "<cfntauthenticate username=\"$1\" password=\"$2\" domain=\"$3\"${4: result=\"${5:[ ]}\" listGroups = \"${6:[ ]}\" throwOnError = \"${7:[ ]}\"}>$0",
		"description": "cfntauthenticate"
	},
	"cfobject": {
		"prefix": "cfobject",
		"body": "<cfobject type = \"com\" action = \"$1\" class = \"$2\" name = \"$3\"${4: context = \"${5:[ ]}\" server = \"${6:[ ]}\"}>$0",
		"description": "cfobject (COM)"
	},
	"cfobject1": {
		"prefix": "cfobject",
		"body": "<cfobject name = \"$1\" component = \"$2\">$0",
		"description": "cfobject (component)"
	},
	"cfobject2": {
		"prefix": "cfobject",
		"body": "<cfobject type = \"corba\" context = \"$1\" class = \"$2\" name = \"$3\"${4: locale = \"${5:[ ]}\"}>$0",
		"description": "cfobject (CORBA)"
	},
	"cfobject3": {
		"prefix": "cfobject",
		"body": "<cfobject type = \"Java\" action = \"$1\" class = \"$2\" name = \"$3\">$0",
		"description": "cfobject (java)"
	},
	"cfobject4": {
		"prefix": "cfobject",
		"body": "<cfobject webservice= \"$1\" name = \"$2\">$0",
		"description": "cfobject (web service)"
	},
	"cfobjectcache": {
		"prefix": "cfobjectcache",
		"body": "<cfobjectcache action = \"clear\">$0",
		"description": "cfobjectcache"
	},
	"cfoutput": {
		"prefix": "cfoutput",
		"body": [
			"<cfoutput${1: query = \"${2:[ ]}\" group = \"${3:[ ]}\" groupCaseSensitive = \"${4:[ ]}\" startRow = \"${5:[ ]}\" maxRows = \"${6:[ ]}\"}>",
			"\t$7",
			"</cfoutput>$0"
		],
		"description": "cfoutput (long)"
	},
	"cfoutput1": {
		"prefix": "cfoutput",
		"body": [
			"<cfoutput>",
			"\t$1",
			"</cfoutput>$0"
		],
		"description": "cfoutput (short)"
	},
	"cfparam": {
		"prefix": "cfparam",
		"body": "<cfparam name=\"$1\"${2: type=\"${3:[string]}\" default=\"${4:[ ]}\"}>$0",
		"description": "cfparam"
	},
	"cfpop": {
		"prefix": "cfpop",
		"body": "<cfpop \r\n\tserver = \"$1\"${2:\r\n\tport = \"${3:[ ]}\"\r\n\tusername = \"${4:[ ]}\"\r\n\tpassword = \"${5:[ ]}\"\r\n\taction = \"${6:[ ]}\"\r\n\tname = \"${7:required if action is getall or getheaderonly}\"\r\n\tmessageNumber = \"${8:[ ]}\"\r\n\tuid = \"${9:[ ]}\" \r\n\tattachmentPath = \"${10:[ ]}\"\r\n\ttimeout = \"${11:[ ]}\"\r\n\tmaxRows = \"${12:[ ]}\"\r\n\tstartRow = \"${13:[ ]}\"\r\n\tgenerateUniqueFilenames = \"${14:[ ]}\"\r\n\tdebug = \"${15:[ ]}\"}>$0",
		"description": "cfpop"
	},
	"cfprocessingdirective": {
		"prefix": "cfprocessingdirective",
		"body": [
			"<cfprocessingdirective suppressWhiteSpace = \"${1:yes or no}\"${2: pageEncoding = \"${3:[ ]}\"}>",
			"\t$4",
			"</cfprocessingdirective>$0"
		],
		"description": "cfprocessingdirective"
	},
	"cfprocparam": {
		"prefix": "cfprocparam",
		"body": "<cfprocparam${1: type = \"${2:[ ]}\" variable = \"${3:required if type is out or inout}\" value = \"${4:required if type is in}\" CFSQLType = \"$5\" maxLength = \"${6:[ ]}\" scale = \"${7:[ ]}\" null = \"${8:[ ]}\"}>$0",
		"description": "cfprocparam"
	},
	"cfprocresult": {
		"prefix": "cfprocresult",
		"body": "<cfprocresult name = \"$1\"${2: resultSet = \"${3:[ ]}\" maxRows = \"${4:[ ]}\"}>$0",
		"description": "cfprocresult"
	},
	"cfproperty": {
		"prefix": "cfproperty",
		"body": "<cfproperty name=\"$1\"${2: type=\"${3:[ ]}\" required=\"${4:[ ]}\" default=\"${5:[ ]}\" displayname=\"${6:[ ]}\" hint=\"${7:[ ]}\"}>$0",
		"description": "cfproperty"
	},
	"cfquery": {
		"prefix": "cfquery",
		"body": [
			"<cfquery name = \"$1\" datasource = \"$2\"${3: username = \"${4:[ ]}\" password = \"${5:[ ]}\"}>",
			"\tdelete from $6",
			"     where $7",
			"</cfquery>$0"
		],
		"description": "cfquery (delete sql)"
	},
	"cfquery1": {
		"prefix": "cfquery",
		"body": [
			"<cfquery name = \"$1\" datasource = \"$2\"${3: username = \"${4:[ ]}\" password = \"${5:[ ]}\"}>",
			"\tinsert into $6($7)",
			"\tvalues($8)",
			"</cfquery>$0"
		],
		"description": "cfquery (insert sql)"
	},
	"cfquery2": {
		"prefix": "cfquery",
		"body": [
			"<cfquery name = \"$1\"${2: dataSource = \"${3:[ ]}\" dbtype = \"${4:[ ]}\" username = \"${5:[ ]}\" password = \"${6:[ ]}\" maxRows = \"${7:[ ]}\" blockFactor = \"${8:[ ]}\" timeout = \"${9:[ ]}\" cachedAfter = \"${10:[ ]}\" cachedWithin = \"${11:[ ]}\" result = \"${12:[ ]}\"}>",
			"\t$13",
			"</cfquery>$0"
		],
		"description": "cfquery (long, all attributes)"
	},
	"cfquery3": {
		"prefix": "cfquery",
		"body": [
			"<cfquery name = \"$1\" datasource = \"$2\"${3: username = \"${4:[ ]}\" password = \"${5:[ ]}\"}>",
			"    select $6",
			"      from $7",
			"     where $8",
			"</cfquery>$0"
		],
		"description": "cfquery (select sql)"
	},
	"cfquery4": {
		"prefix": "cfquery",
		"body": [
			"<cfquery name=\"$1\" datasource=\"$2\">",
			"\t$3",
			"</cfquery>$0"
		],
		"description": "cfquery (short)"
	},
	"cfquery5": {
		"prefix": "cfquery",
		"body": [
			"<cfquery name = \"$1\" datasource = \"$2\"${3: username = \"${4:[ ]}\" password = \"${5:[ ]}\"}>",
			"    update $6",
			"       set $7",
			"     where $8",
			"</cfquery>$0"
		],
		"description": "cfquery (update sql)"
	},
	"cfqueryparam": {
		"prefix": "cfqueryparam",
		"body": "<cfqueryparam value = \"$1\"${2: CFSQLType = \"${3:[ ]}\" maxLength = \"${4:[ ]}\" scale = \"${5:[ ]}\" null = \"${6:[ ]}\" list = \"${7:[ ]}\" separator = \"${8:[ ]}\"}>$0",
		"description": "cfqueryparam"
	},
	"cfregistry": {
		"prefix": "cfregistry",
		"body": "<cfregistry action = \"$1\" branch = \"$2\" entry = \"$3\">$0",
		"description": "cfregistry (delete)"
	},
	"cfregistry1": {
		"prefix": "cfregistry",
		"body": "<cfregistry action = \"getAll\" branch = \"$1\"${2: type = \"${3:[ ]}\" name = \"${4:[ ]}\"  sort = \"${5:[ ]}\"}>$0",
		"description": "cfregistry (get all)"
	},
	"cfregistry2": {
		"prefix": "cfregistry",
		"body": "<cfregistry action = \"get\" branch = \"$1\" entry = \"$2\" variable = \"$3\"${4: type = \"${5:[ ]}\"}>$0",
		"description": "cfregistry (get)"
	},
	"cfregistry3": {
		"prefix": "cfregistry",
		"body": "<cfregistry action = \"$1\" branch = \"$2\" entry = \"$3\"${4: type = \"${5:[ ]}\" value = \"${6:[ ]}\"}>$0",
		"description": "cfregistry (set)"
	},
	"cfreport": {
		"prefix": "cfreport",
		"body": [
			"<cfreport template = \"$1\" format = \"$2\"${3: name = \"${4:[ ]}\" filename = \"${5:[ ]}\" query = \"${6:[ ]}\" overwrite = \"${7:[ ]}\" encryption = \"${8:[ ]}\" ownerpassword = \"${9:[ ]}\" userpassword = \"${10:[ ]}\" permissions = \"${11:[ ]}\"}>",
			"\t$12",
			"</cfreport>$0"
		],
		"description": "cfreport"
	},
	"cfreportparam": {
		"prefix": "cfreportparam",
		"body": "<cfreportparam name = \"$1\" value = \"$2\">$0",
		"description": "cfreportparam"
	},
	"cfrethrow": {
		"prefix": "cfrethrow",
		"body": "<cfrethrow>",
		"description": "cfrethrow"
	},
	"cfreturn": {
		"prefix": "cfreturn",
		"body": "<cfreturn $1>$0",
		"description": "cfreturn"
	},
	"cfsavecontent": {
		"prefix": "cfsavecontent",
		"body": [
			"<cfsavecontent variable = \"$1\">",
			"\t$2",
			"</cfsavecontent>$0"
		],
		"description": "cfsavecontent"
	},
	"cfschedule": {
		"prefix": "cfschedule",
		"body": "<cfschedule\r\n\taction = \"$1\"\r\n\ttask = \"$2\"${3:\r\n\toperation = \"${4:[required if action equals update]}\"\r\n\tfile = \"${5:[required if publish equals yes]}\"\r\n\tpath = \"${6:[required if publish equals yes]}\"\r\n\tstartDate = \"${7:[required if action equals update]}\"\r\n\tstartTime = \"${8:[required if action equals update]}\"\r\n\turl = \"${9:[required if action equals update]}\"\r\n\tport = \"${10:[ ]}\"\r\n\tpublish = \"${11:[ ]}\"\r\n\tendDate = \"${12:[ ]}\"\r\n\tendTime = \"${13:[ ]}\"\r\n\tinterval = \"${14:[required if action equals update]}\"\r\n\trequestTimeOut = \"${15:[ ]}\"\r\n\tusername = \"${16:[ ]}\"\r\n\tpassword = \"${17:[ ]}\"\r\n\tproxyServer = \"${18:[ ]}\"\r\n\tproxyPort = \"${19:[ ]}\"\r\n\tproxyUser = \"${20:[ ]}\"\r\n\tproxyPassword = \"${21:[ ]}\"\r\n\tresolveURL = \"${22:[ ]}\"}>$0",
		"description": "cfschedule"
	},
	"cfscript": {
		"prefix": "cfscript",
		"body": [
			"<cfscript>",
			"\t$1",
			"</cfscript>$0"
		],
		"description": "cfscript"
	},
	"cfsearch": {
		"prefix": "cfsearch",
		"body": "<cfsearch \n\tname = \"$1\"\n\tcollection = \"$2\"${3:\n\tcategory = \"${4:[ ]}\"\n\tcategoryTree = \"${5:[ ]}\"\n\tstatus = \"${6:[ ]}\"\n\ttype = \"${7:[ ]}\"\n\tcriteria = \"${8:[ ]}\"\n\tmaxRows = \"${9:[ ]}\"\n\tstartRow = \"${10:[ ]}\"\n\tsuggestions = \"${11:[ ]}\"\n\tcontextPassages = \"${12:[ ]}\"\n\tcontextBytes = \"${13:[ ]}\"\n\tcontextHighlightBegin = \"${14:[ ]}\"\n\tcontextHighlightEnd = \"${15:[ ]}\"\n\tpreviousCriteria = \"${16:[ ]}\"\n\tlanguage = \"${17:[ ]}\"}>$0",
		"description": "cfsearch"
	},
	"cfselect": {
		"prefix": "cfselect",
		"body": [
			"<cfselect name = \"$1\"${2: label = \"${3:[ ]}\" style = \"${4:[ ]}\" size = \"${5:[ ]}\" required = \"${6:[ ]}\" message = \"${7:[ ]}\" onError = \"${8:[ ]}\" multiple = \"${9:[ ]}\" query = \"${10:[ ]}\" value = \"${11:[ ]}\" display = \"${12:[ ]}\" group = \"${13:[ ]}\" queryPosition = \"${14:[ ]}\" selected = \"${15:[ ]}\" onKeyUp = \"${16:[ ]}\" onKeyDown = \"${17:[ ]}\" onMouseUp = \"${18:[ ]}\" onMouseDown = \"${19:[ ]}\" onChange = \"${20:[ ]}\" onClick = \"${21:[ ]}\" enabled = \"${22:[ ]}\" visible = \"${23:[ ]}\" tooltip = \"${24:[ ]}\" height = \"${25:[ ]}\" width = \"${26:[ ]}\" editable=\"${27:[ ]}\"}>",
			"\t$28",
			"</cfselect>$0"
		],
		"description": "cfselect"
	},
	"cfset": {
		"prefix": "cfset",
		"body": "<cfset $1 = $2>$0",
		"description": "cfset"
	},
	"cfsetting": {
		"prefix": "cfsetting",
		"body": "<cfsetting${1: enableCFoutputOnly = \"${2:[ ]}\" showDebugOutput = \"${3:no}\" requestTimeOut = \"${4:30}\"}>$0",
		"description": "cfsetting"
	},
	"cfsilent": {
		"prefix": "cfsilent",
		"body": [
			"<cfsilent>",
			"\t$1",
			"</cfsilent>$0"
		],
		"description": "cfsilent"
	},
	"cfslider": {
		"prefix": "cfslider",
		"body": "<cfslider \n\tname = \"$1\"${2: \n\tlabel = \"${3:[ ]}\"\n\trange = \"${4:[ ]}\"\n\tscale = \"${5:[ ]}\"\n\tvalue = \"${6:[ ]}\"\n\tonValidate = \"${7:[ ]}\"\n\tmessage = \"${8:[ ]}\"\n\tonError = \"${9:[ ]}\"\n\theight = \"${10:[ ]}\"\n\twidth = \"${11:[ ]}\"\n\tvSpace = \"${12:[ ]}\"\n\thSpace = \"${13:[ ]}\"\n\talign = \"${14:[ ]}\"\n\tlookAndFeel = \"${15:[ ]}\"\n\tvertical = \"${16:[ ]}\"\n\tbgColor = \"${17:[ ]}\"\n\ttextColor = \"${18:[ ]}\"\n\tfont = \"${19:[ ]}\"\n\tfontSize = \"${20:[ ]}\"\n\titalic = \"${21:[ ]}\"\n\tbold = \"${22:[ ]}\"\n\tnotSupported = \"${23:[ ]}\"}>$0",
		"description": "cfslider"
	},
	"cfstoredproc": {
		"prefix": "cfstoredproc",
		"body": "<cfstoredproc procedure = \"$1\" dataSource = \"$2\"${3: username = \"${4:[ ]}\" password = \"${5:[ ]}\" blockFactor = \"${6:[ ]}\" debug = \"${7:[ ]}\" returnCode = \"${8:[ ]}\" result = \"${9:[ ]}\"}>$0",
		"description": "cfstoredproc"
	},
	"cfswitch": {
		"prefix": "cfswitch",
		"body": [
			"<cfswitch expression=\"$1\">",
			"\t<cfcase value=\"$2\">$3</cfcase>",
			"\t<cfdefaultcase>$4</cfdefaultcase>",
			"</cfswitch>$0"
		],
		"description": "cfswitch"
	},
	"cftable": {
		"prefix": "cftable",
		"body": [
			"<cftable query = \"$1\"${2: maxRows = \"${3:[ ]}\" colSpacing = \"${4:[ ]}\" headerLines = \"${5:[ ]}\" startRow = \"${6:[ ]}\"}>",
			"\t$7",
			"</cftable>$0"
		],
		"description": "cftable"
	},
	"cftextarea": {
		"prefix": "cftextarea",
		"body": [
			"<cftextarea name = \"$1\"${2: label = \"${3:[ ]}\" style = \"${4:[ ]}\" required = \"${5:[ ]}\" validate = \"${6:[ ]}\" validateAt= \"${7:[ ]}\" message = \"${8:[ ]}\" range = \"${9:[ ]}\" maxlength = \"${10:[ ]}\" pattern = \"${11:[ ]}\" onValidate = \"${12:[ ]}\" onError = \"${13:[ ]}\" disabled = \"${14:[ ]}\" value = \"${15:[ ]}\" bind = \"${16:[ ]}\" onKeyUp = \"${17:[ ]}\" onKeyDown = \"${18:[ ]}\" onMouseUp = \"${19:[ ]}\" onMouseDown = \"${20:[ ]}\" onChange = \"${21:[ ]}\" onClick = \"${22:[ ]}\" enabled = \"${23:[ ]}\" visible = \"${24:[ ]}\" tooltip = \"${25:[ ]}\" height = \"${26:[ ]}\" width = \"${27:[ ]}\" html = \"${28:[ ]}\"}>",
			"\t$29",
			"</cftextarea>$0"
		],
		"description": "cftextarea"
	},
	"cfthrow": {
		"prefix": "cfthrow",
		"body": "<cfthrow${1: type = \"${2:[ ]}\" message = \"${3:[ ]}\" detail = \"${4:[ ]} \" errorCode = \"${5:[ ]} \" extendedInfo = \"${6:[ ]}\" object = \"${7:[ ]}\"}>$0",
		"description": "cfthrow"
	},
	"cftimer": {
		"prefix": "cftimer",
		"body": [
			"<cftimer${1: label= \"${2:[ ]}\" type = \"${3:[ ]}\"}>",
			"\t$4",
			"</cftimer>$0"
		],
		"description": "cftimer"
	},
	"cftrace": {
		"prefix": "cftrace",
		"body": [
			"<cftrace${1: abort = \"${2:[ ]}\" category = \"${3:[ ]}\" inline = \"${4:[ ]}\" text = \"${5:[ ]}\" type = \"${6:[ ]}\" var = \"${7:[ ]}\"}>",
			"\t$8",
			"</cftrace>$0"
		],
		"description": "cftrace"
	},
	"cftransaction": {
		"prefix": "cftransaction",
		"body": [
			"<cftransaction${1: action = \"${2:[ ]}\" isolation = \"${3:[ ]}\"}>",
			"\t$4",
			"</cftransaction>$0"
		],
		"description": "cftransaction"
	},
	"cftree": {
		"prefix": "cftree",
		"body": [
			"<cftree \r\n\tname = \"$1\"${2:  \r\n\tformat=\"${3:[ ]}\"\r\n\trequired = \"${4:[ ]}\"\r\n\tdelimiter = \"${5:[ ]}\"\r\n\tcompletePath = \"${6:[ ]}\"\r\n\tappendKey = \"${7:[ ]}\"\r\n\thighlightHref = \"${8:[ ]}\"\r\n\tonValidate = \"${9:[ ]}\"\r\n\tmessage = \"${10:[ ]}\"\r\n\tonError = \"${11:[ ]}\"\r\n\tlookAndFeel = \"${12:[ ]}\"\r\n\tfont = \"${13:[ ]}\"\r\n\tfontSize = \"${14:[ ]}\"\r\n\titalic = \"${16:[ ]}\"\r\n\tbold = \"${17:[ ]}\"\r\n\theight = \"${18:[ ]}\"\r\n\twidth = \"${19:[ ]}\"\r\n\tvSpace = \"${20:[ ]}\"\r\n\thSpace = \"${21:[ ]}\"\r\n\talign = \"${22:[ ]}\"\r\n\tborder = \"${23:[ ]}\"\r\n\thScroll = \"${22:[ ]}\"\r\n\tvScroll = \"${24:[ ]}\"\r\n\tstyle= \"${25:[ ]}\"\r\n\tenabled = \"${26:[ ]}\"\r\n\tvisible = \"${27:[ ]}\"\r\n\ttooltip = \"${28:[ ]}\"\r\n\tonChange = \"${29:[ ]}\"\r\n\tnotSupported = \"${30:[ ]}\"\r\n\tonBlur = \"${31:[ ]}\"\r\n\tonFocus = \"${32:[ ]}\"}>",
			"\t$33",
			"</cftree>$0"
		],
		"description": "cftree"
	},
	"cftreeitem": {
		"prefix": "cftreeitem",
		"body": "<cftreeitem  value = \"$1\"${2: display = \"${3:[ ]}\" parent = \"${4:[ ]}\" img = \"${5:[ ]}\" imgopen = \"${6:[ ]}\" href = \"${7:[ ]}\" target = \"${8:[ ]}\" query = \"${9:[ ]}\" queryAsRoot = \"${10:[ ]}\" expand = \"${11:[ ]}\"}>$0",
		"description": "cftreeitem"
	},
	"cftry": {
		"prefix": "cftry",
		"body": [
			"<cftry>",
			"\t$1",
			"<cfcatch type=\"$2\">",
			"\t$3",
			"</cfcatch>",
			"</cftry>$0"
		],
		"description": "cftry"
	},
	"cfupdate": {
		"prefix": "cfupdate",
		"body": "<cfupdate dataSource = \"$1\" tableName = \"$2\"${3: tableOwner = \"${4:[ ]}\" tableQualifier = \"${5:[ ]}\" username = \"${6:[ ]}\" password = \"${7:[ ]}\" formFields = \"${8:[ ]}\"}>$0",
		"description": "cfupdate"
	},
	"cfwddx": {
		"prefix": "cfwddx",
		"body": "<cfwddx action = \"$1\"  input = \"$2\"${3: output = \"${4:required if action equals wddx2cfml}\"  topLevelVariable = \"${5:required if action = wddx2js or cfml2js}\" useTimeZoneInfo = \"${6:[ ]}\" validate = \"${7:[ ]}\"}>$0",
		"description": "cfwddx"
	},
	"cfxml": {
		"prefix": "cfxml",
		"body": [
			"<cfxml variable=\"$1\"${2: caseSensitive=\"${3:[ ]}\"}>",
			"\t$4",
			"</cfxml>$0"
		],
		"description": "cfxml"
	},
	"charsetDecode": {
		"prefix": "charsetDecode",
		"body": "charsetDecode(${1:string}, ${2:encoding})$0",
		"description": "charsetDecode"
	},
	"charsetEncode": {
		"prefix": "charsetEncode",
		"body": "charsetEncode(${1:binaryobject}, ${2:encoding})$0",
		"description": "charsetEncode"
	},
	"chr": {
		"prefix": "chr",
		"body": "chr(${1:number})$0",
		"description": "chr"
	},
	"cJustify": {
		"prefix": "cJustify",
		"body": "cJustify(${1:string}, ${2:length})$0",
		"description": "cJustify"
	},
	"compare": {
		"prefix": "compare",
		"body": "compare(${1:string1}, ${2:string2})$0",
		"description": "compare"
	},
	"compareNoCase": {
		"prefix": "compareNoCase",
		"body": "compareNoCase(${1:string1}, ${2:string2})$0",
		"description": "compareNoCase"
	},
	"cos": {
		"prefix": "cos",
		"body": "cos(${1:number})$0",
		"description": "cos"
	},
	"createDate": {
		"prefix": "createDate",
		"body": "createDate(${1:year}, ${2:month}, ${3:day})$0",
		"description": "createDate"
	},
	"createDateTime": {
		"prefix": "createDateTime",
		"body": "createDateTime(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second})$0",
		"description": "createDateTime"
	},
	"createODBCDate": {
		"prefix": "createODBCDate",
		"body": "createODBCDate(${1:date})$0",
		"description": "createODBCDate"
	},
	"createODBCDateTime": {
		"prefix": "createODBCDateTime",
		"body": "createODBCDateTime(${1:date})$0",
		"description": "createODBCDateTime"
	},
	"createODBCTime": {
		"prefix": "createODBCTime",
		"body": "createODBCTime(${1:date})$0",
		"description": "createODBCTime"
	},
	"createTime": {
		"prefix": "createTime",
		"body": "createTime(${1:hour}, ${2:minute}, ${3:second})$0",
		"description": "createTime"
	},
	"createTimeSpan": {
		"prefix": "createTimeSpan",
		"body": "createTimeSpan(${1:days}, ${2:hours}, ${3:minutes}, ${4:seconds})$0",
		"description": "createTimeSpan"
	},
	"createUUID": {
		"prefix": "createUUID",
		"body": "createUUID()$0",
		"description": "createUUID"
	},
	"dateAdd": {
		"prefix": "dateAdd",
		"body": "dateAdd(${1:\"${2:datepart}\"}, ${3:number}, ${4:date})$0",
		"description": "dateAdd"
	},
	"dateCompare": {
		"prefix": "dateCompare",
		"body": "dateCompare(${1:date1}, ${2:date2} ${3:[, \"datePart\"]})$0",
		"description": "dateCompare"
	},
	"dateConvert": {
		"prefix": "dateConvert",
		"body": "dateConvert(${1:\"${2:conversion-type}\"}, ${3:date})$0",
		"description": "dateConvert"
	},
	"dateDiff": {
		"prefix": "dateDiff",
		"body": "dateDiff(${1:\"${2:datepart}\"}, ${3:date1}, ${4:date2})$0",
		"description": "dateDiff"
	},
	"dateFormat": {
		"prefix": "dateFormat",
		"body": "dateFormat(${1:date} ${2:[, \"mask\"]})$0",
		"description": "dateFormat"
	},
	"datePart": {
		"prefix": "datePart",
		"body": "datePart(${1:\"${2:datepart}\"}, ${3:date})$0",
		"description": "datePart"
	},
	"day": {
		"prefix": "day",
		"body": "day(${1:date})$0",
		"description": "day"
	},
	"dayOfWeek": {
		"prefix": "dayOfWeek",
		"body": "dayOfWeek(${1:date})$0",
		"description": "dayOfWeek"
	},
	"dayOfWeekAsString": {
		"prefix": "dayOfWeekAsString",
		"body": "dayOfWeekAsString(${1:day_of_week})$0",
		"description": "dayOfWeekAsString"
	},
	"dayOfYear": {
		"prefix": "dayOfYear",
		"body": "dayOfYear(${1:date})$0",
		"description": "dayOfYear"
	},
	"daysInMonth": {
		"prefix": "daysInMonth",
		"body": "daysInMonth(${1:date})$0",
		"description": "daysInMonth"
	},
	"daysInYear": {
		"prefix": "daysInYear",
		"body": "daysInYear(${1:date})$0",
		"description": "daysInYear"
	},
	"de": {
		"prefix": "de",
		"body": "de(${1:string})$0",
		"description": "de"
	},
	"decimalFormat": {
		"prefix": "decimalFormat",
		"body": "decimalFormat(${1:number})$0",
		"description": "decimalFormat"
	},
	"decrementValue": {
		"prefix": "decrementValue",
		"body": "decrementValue(${1:number})$0",
		"description": "decrementValue"
	},
	"decrypt": {
		"prefix": "decrypt",
		"body": "decrypt(${1:encrypted_string}, ${2:key}${3: [, algorithm]}${4: [, encoding]}${5: [, IVorSalt]}${6: [, iterations]})$0",
		"description": "decrypt"
	},
	"decryptBinary": {
		"prefix": "decryptBinary",
		"body": "decryptBinary(${1:bytes}, ${2:key}, ${3:[, algorithm]} ${4:[, IVorSalt]} ${5:[, iterations]})$0",
		"description": "decryptBinary"
	},
	"deleteClientVariable": {
		"prefix": "deleteClientVariable",
		"body": "deleteClientVariable(${1:\"${2:name}\"})$0",
		"description": "deleteClientVariable"
	},
	"directoryExists": {
		"prefix": "directoryExists",
		"body": "directoryExists(${1:absolute_path})$0",
		"description": "directoryExists"
	},
	"dollarFormat": {
		"prefix": "dollarFormat",
		"body": "dollarFormat(${1:number})$0",
		"description": "dollarFormat"
	},
	"duplicate": {
		"prefix": "duplicate",
		"body": "duplicate(${1:variable_name})$0",
		"description": "duplicate"
	},
	"encrypt": {
		"prefix": "encrypt",
		"body": "encrypt(${1:string}, ${2:key}${3: [, algorithm]}${4: [, encoding]}${5: [, IVorSalt]}${6: [, iterations]})$0",
		"description": "encrypt"
	},
	"encryptBinary": {
		"prefix": "encryptBinary",
		"body": "encryptBinary(${1:bytes}, ${2:key}${3: [, algorithm]}${4: [, IVorSalt]}${5: [, iterations]})$0",
		"description": "encryptBinary"
	},
	"evaluate": {
		"prefix": "evaluate",
		"body": "evaluate(${1:string_expression1}${2: [, string_expression2]}${3: [, ]})$0",
		"description": "evaluate"
	},
	"exp": {
		"prefix": "exp",
		"body": "exp(${1:number})$0",
		"description": "exp"
	},
	"expandPath": {
		"prefix": "expandPath",
		"body": "expandPath(${1:relative_path})$0",
		"description": "expandPath"
	},
	"fileExists": {
		"prefix": "fileExists",
		"body": "fileExists(${1:absolute_path})$0",
		"description": "fileExists"
	},
	"find": {
		"prefix": "find",
		"body": "find(${1:substring}, ${2:string} ${3:[, start ]})$0",
		"description": "find"
	},
	"findNoCase": {
		"prefix": "findNoCase",
		"body": "findNoCase(${1:substring}, ${2:string} ${3:[, start ]})$0",
		"description": "findNoCase"
	},
	"findOneOf": {
		"prefix": "findOneOf",
		"body": "findOneOf(${1:set}, ${2:string} ${3:[, start ]})$0",
		"description": "findOneOf"
	},
	"firstDayOfMonth": {
		"prefix": "firstDayOfMonth",
		"body": "firstDayOfMonth(${1:date})$0",
		"description": "firstDayOfMonth"
	},
	"fix": {
		"prefix": "fix",
		"body": "fix(${1:number})$0",
		"description": "fix"
	},
	"formatBaseN": {
		"prefix": "formatBaseN",
		"body": "formatBaseN(${1:number}, ${2:radix})$0",
		"description": "formatBaseN"
	},
	"function": {
		"prefix": "function",
		"body": [
			"${1:access} ${2:returnType} function ${3:name}($4) {",
			"\t$5",
			"}$0"
		],
		"description": "function"
	},
	"generateSecretKey": {
		"prefix": "generateSecretKey",
		"body": "generateSecretKey(${1:algorithm})$0",
		"description": "generateSecretKey"
	},
	"getAuthUser": {
		"prefix": "getAuthUser",
		"body": "getAuthUser()$0",
		"description": "getAuthUser"
	},
	"getBaseTagData": {
		"prefix": "getBaseTagData",
		"body": "getBaseTagData(${1:tagname} ${2:[, instancenumber ]})$0",
		"description": "getBaseTagData"
	},
	"getBaseTagList": {
		"prefix": "getBaseTagList",
		"body": "getBaseTagList()$0",
		"description": "getBaseTagList"
	},
	"getBaseTemplatePath": {
		"prefix": "getBaseTemplatePath",
		"body": "getBaseTemplatePath()$0",
		"description": "getBaseTemplatePath"
	},
	"getClientVariablesList": {
		"prefix": "getClientVariablesList",
		"body": "getClientVariablesList()$0",
		"description": "getClientVariablesList"
	},
	"getContextRoot": {
		"prefix": "getContextRoot",
		"body": "getContextRoot()$0",
		"description": "getContextRoot"
	},
	"getCurrentTemplatePath": {
		"prefix": "getCurrentTemplatePath",
		"body": "getCurrentTemplatePath()$0",
		"description": "getCurrentTemplatePath"
	},
	"getDirectoryFromPath": {
		"prefix": "getDirectoryFromPath",
		"body": "getDirectoryFromPath(${1:path})$0",
		"description": "getDirectoryFromPath"
	},
	"getEncoding": {
		"prefix": "getEncoding",
		"body": "getEncoding(${1:scope_name})$0",
		"description": "getEncoding"
	},
	"getException": {
		"prefix": "getException",
		"body": "getException(${1:object})$0",
		"description": "getException"
	},
	"getFileFromPath": {
		"prefix": "getFileFromPath",
		"body": "getFileFromPath(${1:path})$0",
		"description": "getFileFromPath"
	},
	"getFunctionList": {
		"prefix": "getFunctionList",
		"body": "getFunctionList()$0",
		"description": "getFunctionList"
	},
	"getGatewayHelper": {
		"prefix": "getGatewayHelper",
		"body": "getGatewayHelper(${1:gatewayID})$0",
		"description": "getGatewayHelper"
	},
	"getHttpRequestData": {
		"prefix": "getHttpRequestData",
		"body": "getHttpRequestData(${1:includeBody})$0",
		"description": "getHttpRequestData"
	},
	"getHttpTimeString": {
		"prefix": "getHttpTimeString",
		"body": "getHttpTimeString(${1:datetime})$0",
		"description": "getHttpTimeString"
	},
	"getK2ServerDocCount": {
		"prefix": "getK2ServerDocCount",
		"body": "getK2ServerDocCount()$0",
		"description": "getK2ServerDocCount"
	},
	"getK2ServerDocCountLimit": {
		"prefix": "getK2ServerDocCountLimit",
		"body": "getK2ServerDocCountLimit()$0",
		"description": "getK2ServerDocCountLimit"
	},
	"getLocale": {
		"prefix": "getLocale",
		"body": "getLocale()$0",
		"description": "getLocale"
	},
	"getLocaleDisplayName": {
		"prefix": "getLocaleDisplayName",
		"body": "getLocaleDisplayName(${1:[locale]}${2: [, inLocale]})$0",
		"description": "getLocaleDisplayName"
	},
	"getLocalHostIP": {
		"prefix": "getLocalHostIP",
		"body": "getLocalHostIP()$0",
		"description": "getLocalHostIP"
	},
	"getMetaData": {
		"prefix": "getMetaData",
		"body": "getMetaData(${1:object})$0",
		"description": "getMetaData"
	},
	"getMetricData": {
		"prefix": "getMetricData",
		"body": "getMetricData(${1:mode})$0",
		"description": "getMetricData"
	},
	"getPageContext": {
		"prefix": "getPageContext",
		"body": "getPageContext()$0",
		"description": "getPageContext"
	},
	"getProfileSections": {
		"prefix": "getProfileSections",
		"body": "getProfileSections(${1:iniFile})$0",
		"description": "getProfileSections"
	},
	"getProfileString": {
		"prefix": "getProfileString",
		"body": "getProfileString(${1:iniPath}, ${2:section}, ${3:entry})$0",
		"description": "getProfileString"
	},
	"getSOAPRequest": {
		"prefix": "getSOAPRequest",
		"body": "getSOAPRequest()$0",
		"description": "getSOAPRequest"
	},
	"getSOAPRequestHeader": {
		"prefix": "getSOAPRequestHeader",
		"body": "getSOAPRequestHeader(${1:namespace}, ${2:name} ${3:[, asXML]})$0",
		"description": "getSOAPRequestHeader"
	},
	"getSOAPResponse": {
		"prefix": "getSOAPResponse",
		"body": "getSOAPResponse(${1:webservice})$0",
		"description": "getSOAPResponse"
	},
	"getSOAPResponseHeader": {
		"prefix": "getSOAPResponseHeader",
		"body": "getSOAPResponseHeader(${1:webservice}, ${2:namespace}, ${3:name} ${4:[, asXML]})$0",
		"description": "getSOAPResponseHeader"
	},
	"getTempDirectory": {
		"prefix": "getTempDirectory",
		"body": "getTempDirectory()$0",
		"description": "getTempDirectory"
	},
	"getTempFile": {
		"prefix": "getTempFile",
		"body": "getTempFile(${1:dir}, ${2:prefix})$0",
		"description": "getTempFile"
	},
	"getTickCount": {
		"prefix": "getTickCount",
		"body": "getTickCount()$0",
		"description": "getTickCount"
	},
	"getTimeZoneInfo": {
		"prefix": "getTimeZoneInfo",
		"body": "getTimeZoneInfo()$0",
		"description": "getTimeZoneInfo"
	},
	"getToken": {
		"prefix": "getToken",
		"body": "getToken(${1:string}, ${2:index} ${3:[, delimiters ]})$0",
		"description": "getToken"
	},
	"hash": {
		"prefix": "hash",
		"body": "hash(${1:string$}${2: [, algorithm]}${3: [, encoding]})$0",
		"description": "hash"
	},
	"hour": {
		"prefix": "hour",
		"body": "hour(${1:date})$0",
		"description": "hour"
	},
	"htmlCodeFormat": {
		"prefix": "htmlCodeFormat",
		"body": "htmlCodeFormat(${1:string} ${2:[, version ]})$0",
		"description": "htmlCodeFormat"
	},
	"htmlEditFormat": {
		"prefix": "htmlEditFormat",
		"body": "htmlEditFormat(${1:string} ${2:[, version ]})$0",
		"description": "htmlEditFormat"
	},
	"iif": {
		"prefix": "iif",
		"body": "iif(${1:condition}, ${2:string_expression1}, ${3:string_expression2})$0",
		"description": "iif"
	},
	"incrementValue": {
		"prefix": "incrementValue",
		"body": "incrementValue(${1:number})$0",
		"description": "incrementValue"
	},
	"inputBaseN": {
		"prefix": "inputBaseN",
		"body": "inputBaseN(${1:string}, ${2:radix})$0",
		"description": "inputBaseN"
	},
	"insert": {
		"prefix": "insert",
		"body": "insert(${1:substring}, ${2:string}, ${3:position})$0",
		"description": "insert"
	},
	"int": {
		"prefix": "int",
		"body": "int(${1:number})$0",
		"description": "int"
	},
	"isArray": {
		"prefix": "isArray",
		"body": "isArray(${1:value} ${2:[, number ]})$0",
		"description": "isArray"
	},
	"isBinary": {
		"prefix": "isBinary",
		"body": "isBinary(${1:value})$0",
		"description": "isBinary"
	},
	"isBoolean": {
		"prefix": "isBoolean",
		"body": "isBoolean(${1:value})$0",
		"description": "isBoolean"
	},
	"isCustomFunction": {
		"prefix": "isCustomFunction",
		"body": "isCustomFunction(${1:name})$0",
		"description": "isCustomFunction"
	},
	"isDate": {
		"prefix": "isDate",
		"body": "isDate(${1:string})$0",
		"description": "isDate"
	},
	"isDebugMode": {
		"prefix": "isDebugMode",
		"body": "isDebugMode()$0",
		"description": "isDebugMode"
	},
	"isDefined": {
		"prefix": "isDefined",
		"body": "isDefined(${1:\"${2:variable_name}\"})$0",
		"description": "isDefined"
	},
	"isK2ServerABroker": {
		"prefix": "isK2ServerABroker",
		"body": "isK2ServerABroker()$0",
		"description": "isK2ServerABroker"
	},
	"isK2ServerDocCountExceeded": {
		"prefix": "isK2ServerDocCountExceeded",
		"body": "isK2ServerDocCountExceeded()$0",
		"description": "isK2ServerDocCountExceeded"
	},
	"isK2ServerOnline": {
		"prefix": "isK2ServerOnline",
		"body": "isK2ServerOnline()$0",
		"description": "isK2ServerOnline"
	},
	"isLeapYear": {
		"prefix": "isLeapYear",
		"body": "isLeapYear(${1:year})$0",
		"description": "isLeapYear"
	},
	"isLocalHost": {
		"prefix": "isLocalHost",
		"body": "isLocalHost(${1:ipaddress})$0",
		"description": "isLocalHost"
	},
	"isNumeric": {
		"prefix": "isNumeric",
		"body": "isNumeric(${1:string})$0",
		"description": "isNumeric"
	},
	"isNumericDate": {
		"prefix": "isNumericDate",
		"body": "isNumericDate(${1:number})$0",
		"description": "isNumericDate"
	},
	"isObject": {
		"prefix": "isObject",
		"body": "isObject(${1:value})$0",
		"description": "isObject"
	},
	"isQuery": {
		"prefix": "isQuery",
		"body": "isQuery(${1:value})$0",
		"description": "isQuery"
	},
	"isSimpleValue": {
		"prefix": "isSimpleValue",
		"body": "isSimpleValue(${1:value})$0",
		"description": "isSimpleValue"
	},
	"isSOAPRequest": {
		"prefix": "isSOAPRequest",
		"body": "isSOAPRequest()$0",
		"description": "isSOAPRequest"
	},
	"isStruct": {
		"prefix": "isStruct",
		"body": "isStruct(${1:variable})$0",
		"description": "isStruct"
	},
	"isUserInRole": {
		"prefix": "isUserInRole",
		"body": "isUserInRole(${1:\"${2:role_name}\"})$0",
		"description": "isUserInRole"
	},
	"isValid": {
		"prefix": "isValid",
		"body": "isValid(${1:\"${2:type}\"}, ${3:value})$0",
		"description": "isValid"
	},
	"isWDDX": {
		"prefix": "isWDDX",
		"body": "isWDDX(${1:value})$0",
		"description": "isWDDX"
	},
	"isXML": {
		"prefix": "isXML",
		"body": "isXML(${1:value})$0",
		"description": "isXML"
	},
	"isXmlAttribute": {
		"prefix": "isXmlAttribute",
		"body": "isXmlAttribute(${1:value})$0",
		"description": "isXmlAttribute"
	},
	"isXmlDoc": {
		"prefix": "isXmlDoc",
		"body": "isXmlDoc(${1:value})$0",
		"description": "isXmlDoc"
	},
	"isXmlElem": {
		"prefix": "isXmlElem",
		"body": "isXmlElem(${1:value})$0",
		"description": "isXmlElem"
	},
	"isXmlNode": {
		"prefix": "isXmlNode",
		"body": "isXmlNode(${1:value})$0",
		"description": "isXmlNode"
	},
	"isXmlRoot": {
		"prefix": "isXmlRoot",
		"body": "isXmlRoot(${1:value})$0",
		"description": "isXmlRoot"
	},
	"javaCast": {
		"prefix": "javaCast",
		"body": "javaCast(${1:\"${2:type}\"}, ${3:variable})$0",
		"description": "javaCast"
	},
	"jsStringFormat": {
		"prefix": "jsStringFormat",
		"body": "jsStringFormat(${1:string})$0",
		"description": "jsStringFormat"
	},
	"lCase": {
		"prefix": "lCase",
		"body": "lCase(${1:string})$0",
		"description": "lCase"
	},
	"left": {
		"prefix": "left",
		"body": "left(${1:string}, ${2:count})$0",
		"description": "left"
	},
	"len": {
		"prefix": "len",
		"body": "len(${1:string or binary object})$0",
		"description": "len"
	},
	"listAppend": {
		"prefix": "listAppend",
		"body": "listAppend(${1:list}, ${2:value}${3: [, delimiters ]})$0",
		"description": "listAppend"
	},
	"listChangeDelims": {
		"prefix": "listChangeDelims",
		"body": "listChangeDelims(${1:list}, ${2:new_delimiter}${3: [, delimiters ]})$0",
		"description": "listChangeDelims"
	},
	"listContains": {
		"prefix": "listContains",
		"body": "listContains(${1:list}, ${2:substring}${3: [, delimiters ]})$0",
		"description": "listContains"
	},
	"listContainsNoCase": {
		"prefix": "listContainsNoCase",
		"body": "listContainsNoCase(${1:list}, ${2:substring} ${3:[, delimiters ]})$0",
		"description": "listContainsNoCase"
	},
	"listDeleteAt": {
		"prefix": "listDeleteAt",
		"body": "listDeleteAt(${1:list}, ${2:position}${3: [, delimiters ]})$0",
		"description": "listDeleteAt"
	},
	"listFind": {
		"prefix": "listFind",
		"body": "listFind(${1:list}, ${2:value}${3: [, delimiters ]})$0",
		"description": "listFind"
	},
	"listFindNoCase": {
		"prefix": "listFindNoCase",
		"body": "listFindNoCase(${1:list}, ${2:value}${3: [, delimiters ]})$0",
		"description": "listFindNoCase"
	},
	"listFirst": {
		"prefix": "listFirst",
		"body": "listFirst(${1:list}${2: [, delimiters]})$0",
		"description": "listFirst"
	},
	"listGetAt": {
		"prefix": "listGetAt",
		"body": "listGetAt(${1:list}, ${2:position}${3: [, delimiters]})$0",
		"description": "listGetAt"
	},
	"listInsertAt": {
		"prefix": "listInsertAt",
		"body": "listInsertAt(${1:list}, ${2:position}, ${3:value}${4: [, delimiters]})$0",
		"description": "listInsertAt"
	},
	"listLast": {
		"prefix": "listLast",
		"body": "listLast(${1:list}${2: [, delimiters]})$0",
		"description": "listLast"
	},
	"listLen": {
		"prefix": "listLen",
		"body": "listLen(${1:list}${2: [, delimiters ]})$0",
		"description": "listLen"
	},
	"listPrepend": {
		"prefix": "listPrepend",
		"body": "listPrepend(${1:list}, ${2:value}${3: [, delimiters ]})$0",
		"description": "listPrepend"
	},
	"listQualify": {
		"prefix": "listQualify",
		"body": "listQualify(${1:list}, ${2:qualifier}${3: [, delimiters ]}${4: [, elements ]})$0",
		"description": "listQualify"
	},
	"listRest": {
		"prefix": "listRest",
		"body": "listRest(${1:list}${2: [, delimiters ]})$0",
		"description": "listRest"
	},
	"listSetAt": {
		"prefix": "listSetAt",
		"body": "listSetAt(${1:list}, ${2:position}, ${3:value}${4: [, delimiters]})$0",
		"description": "listSetAt"
	},
	"listSort": {
		"prefix": "listSort",
		"body": "listSort(${1:list}, ${2:sort_type}${3: [, sort_order]}${4:[, delimiters]})$0",
		"description": "listSort"
	},
	"listToArray": {
		"prefix": "listToArray",
		"body": "listToArray(${1:list}${2: [, delimiters ]})$0",
		"description": "listToArray"
	},
	"listValueCount": {
		"prefix": "listValueCount",
		"body": "listValueCount(${1:list}, ${2:value}${3: [, delimiters ]})$0",
		"description": "listValueCount"
	},
	"listValueCountNoCase": {
		"prefix": "listValueCountNoCase",
		"body": "listValueCountNoCase(${1:list}, ${2:value}${3: [, delimiters ]})$0",
		"description": "listValueCountNoCase"
	},
	"lJustify": {
		"prefix": "lJustify",
		"body": "lJustify(${1:string}, ${2:length})$0",
		"description": "lJustify"
	},
	"log": {
		"prefix": "log",
		"body": "log(${1:number})$0",
		"description": "log"
	},
	"log10": {
		"prefix": "log10",
		"body": "log10(${1:number})$0",
		"description": "log10"
	},
	"lsCurrencyFormat": {
		"prefix": "lsCurrencyFormat",
		"body": "lsCurrencyFormat(${1:number}${2: [, type]})$0",
		"description": "lsCurrencyFormat"
	},
	"lsDateFormat": {
		"prefix": "lsDateFormat",
		"body": "lsDateFormat(${1:date}${2: [, mask]})$0",
		"description": "lsDateFormat"
	},
	"lsEuroCurrencyFormat": {
		"prefix": "lsEuroCurrencyFormat",
		"body": "lsEuroCurrencyFormat(${1:currency-number}${2: [, type]})$0",
		"description": "lsEuroCurrencyFormat"
	},
	"lsIsCurrency": {
		"prefix": "lsIsCurrency",
		"body": "lsIsCurrency(${1:string})$0",
		"description": "lsIsCurrency"
	},
	"lsIsDate": {
		"prefix": "lsIsDate",
		"body": "lsIsDate(${1:string})$0",
		"description": "lsIsDate"
	},
	"lsIsNumeric": {
		"prefix": "lsIsNumeric",
		"body": "lsIsNumeric(${1:string})$0",
		"description": "lsIsNumeric"
	},
	"lsNumberFormat": {
		"prefix": "lsNumberFormat",
		"body": "lsNumberFormat(${1:number}${2: [, mask ]})$0",
		"description": "lsNumberFormat"
	},
	"lsParseCurrency": {
		"prefix": "lsParseCurrency",
		"body": "lsParseCurrency(${1:string})$0",
		"description": "lsParseCurrency"
	},
	"lsParseDateTime": {
		"prefix": "lsParseDateTime",
		"body": "lsParseDateTime(${1:date/time-string})$0",
		"description": "lsParseDateTime"
	},
	"lsParseEuroCurrency": {
		"prefix": "lsParseEuroCurrency",
		"body": "lsParseEuroCurrency(${1:currency-string})$0",
		"description": "lsParseEuroCurrency"
	},
	"lsParseNumber": {
		"prefix": "lsParseNumber",
		"body": "lsParseNumber(${1:string})$0",
		"description": "lsParseNumber"
	},
	"lsTimeFormat": {
		"prefix": "lsTimeFormat",
		"body": "lsTimeFormat(${1:time}${2: [, mask ]})$0",
		"description": "lsTimeFormat"
	},
	"lTrim": {
		"prefix": "lTrim",
		"body": "lTrim(${1:string})$0",
		"description": "lTrim"
	},
	"max": {
		"prefix": "max",
		"body": "max(${1:number1}, ${2:number2})$0",
		"description": "max"
	},
	"mid": {
		"prefix": "mid",
		"body": "mid(${1:string}, ${2:start}, ${3:count})$0",
		"description": "mid"
	},
	"min": {
		"prefix": "min",
		"body": "min(${1:number1}, ${2:number2})$0",
		"description": "min"
	},
	"minute": {
		"prefix": "minute",
		"body": "minute(${1:date})$0",
		"description": "minute"
	},
	"month": {
		"prefix": "month",
		"body": "month(${1:date})$0",
		"description": "month"
	},
	"monthAsString": {
		"prefix": "monthAsString",
		"body": "monthAsString(${1:month_number})$0",
		"description": "monthAsString"
	},
	"now": {
		"prefix": "now",
		"body": "now()$0",
		"description": "now"
	},
	"numberFormat": {
		"prefix": "numberFormat",
		"body": "numberFormat(${1:number}${2: [, mask ]})$0",
		"description": "numberFormat"
	},
	"paragraphFormat": {
		"prefix": "paragraphFormat",
		"body": "paragraphFormat(${1:string})$0",
		"description": "paragraphFormat"
	},
	"parseDateTime": {
		"prefix": "parseDateTime",
		"body": "parseDateTime(${1:datetime}${2: [, pop-conversion ]})$0",
		"description": "parseDateTime"
	},
	"pi": {
		"prefix": "pi",
		"body": "pi()$0",
		"description": "pi"
	},
	"preserveSingleQuotes": {
		"prefix": "preserveSingleQuotes",
		"body": "preserveSingleQuotes(${1:variable})$0",
		"description": "preserveSingleQuotes"
	},
	"quarter": {
		"prefix": "quarter",
		"body": "quarter(${1:date})$0",
		"description": "quarter"
	},
	"queryAddColumn": {
		"prefix": "queryAddColumn",
		"body": "queryAddColumn(${1:query}, ${2:column-name}${3: [, datatype]}${4: [, array-name]})$0",
		"description": "queryAddColumn"
	},
	"queryAddRow": {
		"prefix": "queryAddRow",
		"body": "queryAddRow(${1:query}${2: [,number]})$0",
		"description": "queryAddRow"
	},
	"queryNew": {
		"prefix": "queryNew",
		"body": "queryNew(${1:columnlist}${2: [, columntypelist]})$0",
		"description": "queryNew"
	},
	"querySetCell": {
		"prefix": "querySetCell",
		"body": "querySetCell(${1:query}, ${2:column_name}, ${3:value}${4: [, row_number ]})$0",
		"description": "querySetCell"
	},
	"quotedValueList": {
		"prefix": "quotedValueList",
		"body": "quotedValueList(${1:query.column}${2: [, delimiter]})$0",
		"description": "quotedValueList"
	},
	"rand": {
		"prefix": "rand",
		"body": "rand(${1:[algorithm]})$0",
		"description": "rand"
	},
	"randomize": {
		"prefix": "randomize",
		"body": "randomize(${1:number}${2: [, algorithm]})$0",
		"description": "randomize"
	},
	"randRange": {
		"prefix": "randRange",
		"body": "randRange(${1:number1}, ${2:number2}${3: [, algorithm]})$0",
		"description": "randRange"
	},
	"reFind": {
		"prefix": "reFind",
		"body": "reFind(${1:reg_expression}, ${2:string}${3: [, start]}${4: [, returnsubexpressions]})$0",
		"description": "reFind"
	},
	"reFindNoCase": {
		"prefix": "reFindNoCase",
		"body": "reFindNoCase(${1:reg_expression}, ${2:string}${3: [, start]}${4: [, returnsubexpressions]})$0",
		"description": "reFindNoCase"
	},
	"releaseComObject": {
		"prefix": "releaseComObject",
		"body": "releaseComObject(${1:objectName})$0",
		"description": "releaseComObject"
	},
	"removeChars": {
		"prefix": "removeChars",
		"body": "removeChars(${1:string}, ${2:start}, ${3:count})$0",
		"description": "removeChars"
	},
	"repeatString": {
		"prefix": "repeatString",
		"body": "repeatString(${1:string}, ${2:count})$0",
		"description": "repeatString"
	},
	"replace": {
		"prefix": "replace",
		"body": "replace(${1:string}, ${2:substring1}, ${3:substring2}${4: [, scope]})$0",
		"description": "replace"
	},
	"replaceList": {
		"prefix": "replaceList",
		"body": "replaceList(${1:string}, ${2:list1}, ${3:list2})$0",
		"description": "replaceList"
	},
	"replaceNoCase": {
		"prefix": "replaceNoCase",
		"body": "replaceNoCase(${1:string}, ${2:substring1}, ${3:substring2}${4: [, scope]})$0",
		"description": "replaceNoCase"
	},
	"reReplace": {
		"prefix": "reReplace",
		"body": "reReplace(${1:string}, ${2:reg_expression}, ${3:substring}${4: [, scope]})$0",
		"description": "reReplace"
	},
	"reReplaceNoCase": {
		"prefix": "reReplaceNoCase",
		"body": "reReplaceNoCase(${1:string}, ${2:reg_expression}, ${3:substring}${4: [, scope]})$0",
		"description": "reReplaceNoCase"
	},
	"reverse": {
		"prefix": "reverse",
		"body": "reverse(${1:string})$0",
		"description": "reverse"
	},
	"right": {
		"prefix": "right",
		"body": "right(${1:string}, ${2:count})$0",
		"description": "right"
	},
	"rJustify": {
		"prefix": "rJustify",
		"body": "rJustify(${1:string}, ${2:length})$0",
		"description": "rJustify"
	},
	"round": {
		"prefix": "round",
		"body": "round(${1:number})$0",
		"description": "round"
	},
	"rTrim": {
		"prefix": "rTrim",
		"body": "rTrim(${1:string})$0",
		"description": "rTrim"
	},
	"second": {
		"prefix": "second",
		"body": "second(${1:date})$0",
		"description": "second"
	},
	"sendGatewayMessage": {
		"prefix": "sendGatewayMessage",
		"body": "sendGatewayMessage(${1:gatewayID}, ${2:data})$0",
		"description": "sendGatewayMessage"
	},
	"setEncoding": {
		"prefix": "setEncoding",
		"body": "setEncoding(${1:scope_name,charset})$0",
		"description": "setEncoding"
	},
	"setLocale": {
		"prefix": "setLocale",
		"body": "setLocale(${1:new_locale})$0",
		"description": "setLocale"
	},
	"setProfileString": {
		"prefix": "setProfileString",
		"body": "setProfileString(${1:iniPath}, ${2:section}, ${3:entry}, ${4:value})$0",
		"description": "setProfileString"
	},
	"setVariable": {
		"prefix": "setVariable",
		"body": "setVariable(${1:name}, ${2:value})$0",
		"description": "setVariable"
	},
	"sgn": {
		"prefix": "sgn",
		"body": "sgn(${1:number})$0",
		"description": "sgn"
	},
	"sin": {
		"prefix": "sin",
		"body": "sin(${1:number})$0",
		"description": "sin"
	},
	"spanExcluding": {
		"prefix": "spanExcluding",
		"body": "spanExcluding(${1:string}, ${2:set})$0",
		"description": "spanExcluding"
	},
	"spanIncluding": {
		"prefix": "spanIncluding",
		"body": "spanIncluding(${1:string}, ${2:set})$0",
		"description": "spanIncluding"
	},
	"sqr": {
		"prefix": "sqr",
		"body": "sqr(${1:number})$0",
		"description": "sqr"
	},
	"stripCR": {
		"prefix": "stripCR",
		"body": "stripCR(${1:string})$0",
		"description": "stripCR"
	},
	"structAppend": {
		"prefix": "structAppend",
		"body": "structAppend(${1:struct1}, ${2:struct2}, ${3:overwriteFlag})$0",
		"description": "structAppend"
	},
	"structClear": {
		"prefix": "structClear",
		"body": "structClear(${1:structure})$0",
		"description": "structClear"
	},
	"structCopy": {
		"prefix": "structCopy",
		"body": "structCopy(${1:structure})$0",
		"description": "structCopy"
	},
	"structCount": {
		"prefix": "structCount",
		"body": "structCount(${1:structure})$0",
		"description": "structCount"
	},
	"structDelete": {
		"prefix": "structDelete",
		"body": "structDelete(${1:structure}, ${2:key}${3: [, indicatenotexisting]})$0",
		"description": "structDelete"
	},
	"structFind": {
		"prefix": "structFind",
		"body": "structFind(${1:structure}, ${2:key})$0",
		"description": "structFind"
	},
	"structFindKey": {
		"prefix": "structFindKey",
		"body": "structFindKey(${1:top}, ${2:value}, ${3:scope})$0",
		"description": "structFindKey"
	},
	"structFindValue": {
		"prefix": "structFindValue",
		"body": "structFindValue(${1: top}, ${2:value}${3: [, scope]})$0",
		"description": "structFindValue"
	},
	"structGet": {
		"prefix": "structGet",
		"body": "structGet(${1:pathDesired})$0",
		"description": "structGet"
	},
	"structInsert": {
		"prefix": "structInsert",
		"body": "structInsert(${1:structure}, ${2:key}, ${3:value}${4: [, allowoverwrite]})$0",
		"description": "structInsert"
	},
	"structIsEmpty": {
		"prefix": "structIsEmpty",
		"body": "structIsEmpty(${1:structure})$0",
		"description": "structIsEmpty"
	},
	"structKeyArray": {
		"prefix": "structKeyArray",
		"body": "structKeyArray(${1:structure})$0",
		"description": "structKeyArray"
	},
	"structKeyExists": {
		"prefix": "structKeyExists",
		"body": "structKeyExists(${1:structure}, ${2:\"${3:key}\"})$0",
		"description": "structKeyExists"
	},
	"structKeyList": {
		"prefix": "structKeyList",
		"body": "structKeyList(${1:structure}${2: [, delimiter]})$0",
		"description": "structKeyList"
	},
	"structNew": {
		"prefix": "structNew",
		"body": "structNew($1)$0",
		"description": "structNew"
	},
	"structSort": {
		"prefix": "structSort",
		"body": "structSort(${1:base}, ${2:sortType}, ${3:sortOrder}, ${4:pathToSubElement})$0",
		"description": "structSort"
	},
	"structUpdate": {
		"prefix": "structUpdate",
		"body": "structUpdate(${1:structure}, ${2:key}, ${3:value})$0",
		"description": "structUpdate"
	},
	"tan": {
		"prefix": "tan",
		"body": "tan(${1:number})$0",
		"description": "tan"
	},
	"timeFormat": {
		"prefix": "timeFormat",
		"body": "timeFormat(${1:time}${2: [, mask]})$0",
		"description": "timeFormat"
	},
	"toBase64": {
		"prefix": "toBase64",
		"body": "toBase64(${1:string or binary_object}${2: [, encoding]})$0",
		"description": "toBase64"
	},
	"toBinary": {
		"prefix": "toBinary",
		"body": "toBinary(${1:string_in_Base64 or binary_value})$0",
		"description": "toBinary"
	},
	"toScript": {
		"prefix": "toScript",
		"body": "toScript(${1:cfvar}, ${2:javascriptvar}, ${3:outputformat}, ${4:ASFormat})$0",
		"description": "toScript"
	},
	"toString": {
		"prefix": "toString",
		"body": "toString(${1:value}${2: [, encoding]})$0",
		"description": "toString"
	},
	"trim": {
		"prefix": "trim",
		"body": "trim(${1:string})$0",
		"description": "trim"
	},
	"uCase": {
		"prefix": "uCase",
		"body": "uCase(${1:string})$0",
		"description": "uCase"
	},
	"urlDecode": {
		"prefix": "urlDecode",
		"body": "urlDecode(${1:urlEncodedString}${2: [, charset]})$0",
		"description": "urlDecode"
	},
	"urlEncodedFormat": {
		"prefix": "urlEncodedFormat",
		"body": "urlEncodedFormat(${1:string}${2: [, charset]})$0",
		"description": "urlEncodedFormat"
	},
	"urlSessionFormat": {
		"prefix": "urlSessionFormat",
		"body": "urlSessionFormat(${1:request_URL})$0",
		"description": "urlSessionFormat"
	},
	"val": {
		"prefix": "val",
		"body": "val(${1:string})$0",
		"description": "val"
	},
	"valueList": {
		"prefix": "valueList",
		"body": "valueList(${1:query.column}${2: [, delimiter]})$0",
		"description": "valueList"
	},
	"week": {
		"prefix": "week",
		"body": "week(${1:date})$0",
		"description": "week"
	},
	"wrap": {
		"prefix": "wrap",
		"body": "wrap(${1:string}, ${2:limit}${3: [, strip]})$0",
		"description": "wrap"
	},
	"writeOutput": {
		"prefix": "writeOutput",
		"body": "writeOutput(${1:string})$0",
		"description": "writeOutput"
	},
	"xmlChildPos": {
		"prefix": "xmlChildPos",
		"body": "xmlChildPos(${1:elem}, ${2:childName}, ${3:N})$0",
		"description": "xmlChildPos"
	},
	"xmlElemNew": {
		"prefix": "xmlElemNew",
		"body": "xmlElemNew(${1:xmlObj}${2: [, namespace]}${3: [, childName]})$0",
		"description": "xmlElemNew"
	},
	"xmlFormat": {
		"prefix": "xmlFormat",
		"body": "xmlFormat(${1:string})$0",
		"description": "xmlFormat"
	},
	"xmlGetNodeType": {
		"prefix": "xmlGetNodeType",
		"body": "xmlGetNodeType(${1:xmlNode})$0",
		"description": "xmlGetNodeType"
	},
	"xmlNew": {
		"prefix": "xmlNew",
		"body": "xmlNew(${1:[caseSensitive]})$0",
		"description": "xmlNew"
	},
	"xmlParse": {
		"prefix": "xmlParse",
		"body": "xmlParse(${1:xmlText}${2: [, caseSensitive ]}${3: [, validator]})$0",
		"description": "xmlParse"
	},
	"xmlSearch": {
		"prefix": "xmlSearch",
		"body": "xmlSearch(${1:xmlDoc}, ${2:xPathString})$0",
		"description": "xmlSearch"
	},
	"xmlTransform": {
		"prefix": "xmlTransform",
		"body": "xmlTransform(${1:xml}, ${2:xsl}${3: [, parameters]})$0",
		"description": "xmlTransform"
	},
	"xmlValidate": {
		"prefix": "xmlValidate",
		"body": "xmlValidate(${1:xmlDoc}${2: [, validator]})$0",
		"description": "xmlValidate"
	},
	"year": {
		"prefix": "year",
		"body": "year(${1:date})$0",
		"description": "year"
	},
	"yesNoFormat": {
		"prefix": "yesNoFormat",
		"body": "yesNoFormat(${1:value})$0",
		"description": "yesNoFormat"
	}
}